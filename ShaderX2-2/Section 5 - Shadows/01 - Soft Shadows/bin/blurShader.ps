; Pixel shader version 1.4
ps_1_4

; weight for each incoming textures's contribution
;def c0, 0.2, 0.2, 0.2, 0.2
def c0, 0.1666, 0.1666, 0.1666, 0.1666

; sample the 6 textures. t0 is at the center of the pixel;
; all other textures are sampled with an offset.
texld r0, t0
texld r1, t1
texld r2, t2
texld r3, t3
texld r4, t4
texld r5, t5

; stores in r1.r either r0.r or r1.r, depending on the
; value of r1.g. This is a conditionnal mov. In the mean
; time, we'll weight the contribution of r0.r in the alpha
; component of r0 and add it to the result.
cnd r1.r, r1.g, r1.r, r0.r
+mul r0.a, r0.r, c0.z

; basically does the same for r2 and the contribution of
; r1.r. As you notice, there's a 1-instruction "delay"
; between calculating the contribution of a texture, and
; weighting and adding it to the final result.
cnd r2.r, r2.g, r2.r, r0.r
+mad r0.a, r1.r, c0.z, r0.a

; same here, but for r3's contribution and weighting r2.
cnd r3.r, r3.g, r3.r, r0.r
+mad r0.a, r2.r, c0.z, r0.a

; same here, but for r4's contribution and weighting r3.
cnd r4.r, r4.g, r4.r, r0.r
+mad r0.a, r3.r, c0.z, r0.a

; same here, but for r5's contribution and weighting r4.
cnd r5.r, r5.g, r5.r, r0.r
+mad r0.a, r4.r, c0.z, r0.a

; we need a final weighting due to the 1-instruction "delay".
; this is done here, by weighting r5 and adding it up to
; the final result, r0
mad r0.r, r5.r, c0.z, r0.a

; this final one is masking the result depending on the
; value of r0.g; do not forget that the green component is
; always either 0 or 1. We basically only allow writing
; when the center pixel is from the penumbra or the inner
; shadow:
mul r0.r, r0.r, r0.g

; that's it! note that r0.g hasn't been modified at all
; by the shader; in summary, all the red components of the
; offsetted textures have been blurred by an average filter,
; and the green component untouched (blurring doesn't affect
; the penumbra/shadowed areas)
