


#include "pgIInput.h"

#include <pgLib/Base/pgString.h>


pgIInput::KEY
pgIInput::getKeyFromString(const pgString& nStr)
{
	if(nStr == "KEY_ESCAPE")		return KEY_ESCAPE;
	if(nStr == "KEY_1")				return KEY_1;
	if(nStr == "KEY_2")				return KEY_2;
	if(nStr == "KEY_3")				return KEY_3;
	if(nStr == "KEY_4")				return KEY_4;
	if(nStr == "KEY_5")				return KEY_5;
	if(nStr == "KEY_6")				return KEY_6;
	if(nStr == "KEY_7")				return KEY_7;
	if(nStr == "KEY_8")				return KEY_8;
	if(nStr == "KEY_9")				return KEY_9;
	if(nStr == "KEY_0")				return KEY_0;
	if(nStr == "KEY_MINUS")			return KEY_MINUS;
	if(nStr == "KEY_EQUALS")		return KEY_EQUALS;
	if(nStr == "KEY_BACK")			return KEY_BACK;
	if(nStr == "KEY_TAB")			return KEY_TAB;
	if(nStr == "KEY_Q")				return KEY_Q;
	if(nStr == "KEY_W")				return KEY_W;
	if(nStr == "KEY_E")				return KEY_E;
	if(nStr == "KEY_R")				return KEY_R;
	if(nStr == "KEY_T")				return KEY_T;
	if(nStr == "KEY_Y")				return KEY_Y;
	if(nStr == "KEY_U")				return KEY_U;
	if(nStr == "KEY_I")				return KEY_I;
	if(nStr == "KEY_O")				return KEY_O;
	if(nStr == "KEY_P")				return KEY_P;
	if(nStr == "KEY_LBRACKET")		return KEY_LBRACKET;
	if(nStr == "KEY_RBRACKET")		return KEY_RBRACKET;
	if(nStr == "KEY_RETURN")		return KEY_RETURN;
	if(nStr == "KEY_LCONTROL")		return KEY_LCONTROL;
	if(nStr == "KEY_A")				return KEY_A;
	if(nStr == "KEY_S")				return KEY_S;
	if(nStr == "KEY_D")				return KEY_D;
	if(nStr == "KEY_F")				return KEY_F;
	if(nStr == "KEY_G")				return KEY_G;
	if(nStr == "KEY_H")				return KEY_H;
	if(nStr == "KEY_J")				return KEY_J;
	if(nStr == "KEY_K")				return KEY_K;
	if(nStr == "KEY_L")				return KEY_L;
	if(nStr == "KEY_SEMICOLON")		return KEY_SEMICOLON;
	if(nStr == "KEY_APOSTROPHE")	return KEY_APOSTROPHE;
	if(nStr == "KEY_GRAVE")			return KEY_GRAVE;
	if(nStr == "KEY_LSHIFT")		return KEY_LSHIFT;
	if(nStr == "KEY_BACKSLASH")		return KEY_BACKSLASH;
	if(nStr == "KEY_Z")				return KEY_Z;
	if(nStr == "KEY_X")				return KEY_X;
	if(nStr == "KEY_C")				return KEY_C;
	if(nStr == "KEY_V")				return KEY_V;
	if(nStr == "KEY_B")				return KEY_B;
	if(nStr == "KEY_N")				return KEY_N;
	if(nStr == "KEY_M")				return KEY_M;
	if(nStr == "KEY_COMMA")			return KEY_COMMA;
	if(nStr == "KEY_PERIOD")		return KEY_PERIOD;
	if(nStr == "KEY_SLASH")			return KEY_SLASH;
	if(nStr == "KEY_RSHIFT")		return KEY_RSHIFT;
	if(nStr == "KEY_MULTIPLY")		return KEY_MULTIPLY;
	if(nStr == "KEY_LMENU")			return KEY_LMENU;
	if(nStr == "KEY_SPACE")			return KEY_SPACE;
	if(nStr == "KEY_CAPITAL")		return KEY_CAPITAL;
	if(nStr == "KEY_F1")			return KEY_F1;
	if(nStr == "KEY_F2")			return KEY_F2;
	if(nStr == "KEY_F3")			return KEY_F3;
	if(nStr == "KEY_F4")			return KEY_F4;
	if(nStr == "KEY_F5")			return KEY_F5;
	if(nStr == "KEY_F6")			return KEY_F6;
	if(nStr == "KEY_F7")			return KEY_F7;
	if(nStr == "KEY_F8")			return KEY_F8;
	if(nStr == "KEY_F9")			return KEY_F9;
	if(nStr == "KEY_F10")			return KEY_F10;
	if(nStr == "KEY_NUpgOCK")		return KEY_NUpgOCK;
	if(nStr == "KEY_SCROLL")		return KEY_SCROLL;
	if(nStr == "KEY_NUMPAD7")		return KEY_NUMPAD7;
	if(nStr == "KEY_NUMPAD8")		return KEY_NUMPAD8;
	if(nStr == "KEY_NUMPAD9")		return KEY_NUMPAD9;
	if(nStr == "KEY_SUBTRACT")		return KEY_SUBTRACT;
	if(nStr == "KEY_NUMPAD4")		return KEY_NUMPAD4;
	if(nStr == "KEY_NUMPAD5")		return KEY_NUMPAD5;
	if(nStr == "KEY_NUMPAD6")		return KEY_NUMPAD6;
	if(nStr == "KEY_ADD")			return KEY_ADD;
	if(nStr == "KEY_NUMPAD1")		return KEY_NUMPAD1;
	if(nStr == "KEY_NUMPAD2")		return KEY_NUMPAD2;
	if(nStr == "KEY_NUMPAD3")		return KEY_NUMPAD3;
	if(nStr == "KEY_NUMPAD0")		return KEY_NUMPAD0;
	if(nStr == "KEY_DECIMAL")		return KEY_DECIMAL;
	if(nStr == "KEY_OEM_102")		return KEY_OEM_102;
	if(nStr == "KEY_F11")			return KEY_F11;
	if(nStr == "KEY_F12")			return KEY_F12;
	if(nStr == "KEY_F13")			return KEY_F13;
	if(nStr == "KEY_F14")			return KEY_F14;
	if(nStr == "KEY_F15")			return KEY_F15;
	if(nStr == "KEY_KANA")			return KEY_KANA;
	if(nStr == "KEY_ABNT_C1")		return KEY_ABNT_C1;
	if(nStr == "KEY_CONVERT")		return KEY_CONVERT;
	if(nStr == "KEY_NOCONVERT")		return KEY_NOCONVERT;
	if(nStr == "KEY_YEN")			return KEY_YEN;
	if(nStr == "KEY_ABNT_C2")		return KEY_ABNT_C2;
	if(nStr == "KEY_NUMPADEQUALS")	return KEY_NUMPADEQUALS;
	if(nStr == "KEY_PREVTRACK")		return KEY_PREVTRACK;
	if(nStr == "KEY_AT")			return KEY_AT;
	if(nStr == "KEY_COLON")			return KEY_COLON;
	if(nStr == "KEY_UNDERLINE")		return KEY_UNDERLINE;
	if(nStr == "KEY_KANJI")			return KEY_KANJI;
	if(nStr == "KEY_STOP")			return KEY_STOP;
	if(nStr == "KEY_AX")			return KEY_AX;
	if(nStr == "KEY_UNLABELED")		return KEY_UNLABELED;
	if(nStr == "KEY_NEXTTRACK")		return KEY_NEXTTRACK;
	if(nStr == "KEY_NUMPADENTER")	return KEY_NUMPADENTER;
	if(nStr == "KEY_RCONTROL")		return KEY_RCONTROL;
	if(nStr == "KEY_MUTE")			return KEY_MUTE;
	if(nStr == "KEY_CALCULATOR")	return KEY_CALCULATOR;
	if(nStr == "KEY_PLAYPAUSE")		return KEY_PLAYPAUSE;
	if(nStr == "KEY_MEDIASTOP")		return KEY_MEDIASTOP;
	if(nStr == "KEY_VOLUMEDOWN")	return KEY_VOLUMEDOWN;
	if(nStr == "KEY_VOLUMEUP")		return KEY_VOLUMEUP;
	if(nStr == "KEY_WEBHOME")		return KEY_WEBHOME;
	if(nStr == "KEY_NUMPADCOMMA")	return KEY_NUMPADCOMMA;
	if(nStr == "KEY_DIVIDE")		return KEY_DIVIDE;
	if(nStr == "KEY_SYSRQ")			return KEY_SYSRQ;
	if(nStr == "KEY_RMENU")			return KEY_RMENU;
	if(nStr == "KEY_PAUSE")			return KEY_PAUSE;
	if(nStr == "KEY_HOME")			return KEY_HOME;
	if(nStr == "KEY_UP")			return KEY_UP;
	if(nStr == "KEY_PRIOR")			return KEY_PRIOR;
	if(nStr == "KEY_LEFT")			return KEY_LEFT;
	if(nStr == "KEY_RIGHT")			return KEY_RIGHT;
	if(nStr == "KEY_END")			return KEY_END;
	if(nStr == "KEY_DOWN")			return KEY_DOWN;
	if(nStr == "KEY_NEXT")			return KEY_NEXT;
	if(nStr == "KEY_INSERT")		return KEY_INSERT;
	if(nStr == "KEY_DELETE")		return KEY_DELETE;
	if(nStr == "KEY_LWIN")			return KEY_LWIN;
	if(nStr == "KEY_RWIN")			return KEY_RWIN;
	if(nStr == "KEY_APPS")			return KEY_APPS;
	if(nStr == "KEY_POWER")			return KEY_POWER;
	if(nStr == "KEY_SLEEP")			return KEY_SLEEP;
	if(nStr == "KEY_WAKE")			return KEY_WAKE;
	if(nStr == "KEY_WEBSEARCH")		return KEY_WEBSEARCH;
	if(nStr == "KEY_WEBFAVORITES")	return KEY_WEBFAVORITES;
	if(nStr == "KEY_WEBREFRESH")	return KEY_WEBREFRESH;
	if(nStr == "KEY_WEBSTOP")		return KEY_WEBSTOP;
	if(nStr == "KEY_WEBFORWARD")	return KEY_WEBFORWARD;
	if(nStr == "KEY_WEBBACK")		return KEY_WEBBACK;
	if(nStr == "KEY_MYCOMPUTER")	return KEY_MYCOMPUTER;
	if(nStr == "KEY_MAIL")			return KEY_MAIL;
	if(nStr == "KEY_MEDIASELECT")	return KEY_MEDIASELECT;
	if(nStr == "KEY_BACKSPACE")		return KEY_BACKSPACE;
	if(nStr == "KEY_NUMPADSTAR")	return KEY_NUMPADSTAR;
	if(nStr == "KEY_LALT")			return KEY_LALT;
	if(nStr == "KEY_CAPSLOCK")		return KEY_CAPSLOCK;
	if(nStr == "KEY_NUMPADMINUS")	return KEY_NUMPADMINUS;
	if(nStr == "KEY_NUMPADPLUS")	return KEY_NUMPADPLUS;
	if(nStr == "KEY_NUMPADPERIOD")	return KEY_NUMPADPERIOD;
	if(nStr == "KEY_NUMPADSLASH")	return KEY_NUMPADSLASH;
	if(nStr == "KEY_RALT")			return KEY_RALT;
	if(nStr == "KEY_UPARROW")		return KEY_UPARROW;
	if(nStr == "KEY_PGUP")			return KEY_PGUP;
	if(nStr == "KEY_LEFTARROW")		return KEY_LEFTARROW;
	if(nStr == "KEY_RIGHTARROW")	return KEY_RIGHTARROW;
	if(nStr == "KEY_DOWNARROW")		return KEY_DOWNARROW;
	if(nStr == "KEY_PGDN")			return KEY_PGDN;

	if(nStr == "MOUSE_LEFT")		return KEY_MOUSE_LEFT;
	if(nStr == "MOUSE_MIDDLE")		return KEY_MOUSE_MIDDLE;
	if(nStr == "MOUSE_RIGHT")		return KEY_MOUSE_RIGHT;

	return KEY_UNDEFINED;
}

