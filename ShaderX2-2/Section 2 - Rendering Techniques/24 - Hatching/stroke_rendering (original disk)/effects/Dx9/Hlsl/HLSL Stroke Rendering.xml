<RENDER_MONKEY><WORKSPACE DESC="Stroke Rendering" VALIDATION="" TYPE="TABLE" HIDDEN="FALSE"><VARIABLE TYPE="MATRIX" MATRIX_TYPE="FLOAT" DESC="view_proj_matrix" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="MATRIX" MATRIX_TYPE="FLOAT" DESC="view_matrix" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="MATRIX" MATRIX_TYPE="FLOAT" DESC="proj_matrix" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="TEXT" DESC="RM_REGISTRY" ARTIST_EDITABLE="FALSE" HIDDEN="TRUE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="RM_LOCAL" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="RM_WINDOW_MANAGER" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="MDI_WND" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="RmShaderEditorDx9.dll" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0.7666099" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.8228279" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-2.671233" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-2.190802" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0.776455" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.8201058" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-7" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-5.737769" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0.776455" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.8201058" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-7" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-5.737769" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="RmStream.dll" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="2.473595" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.529813" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.479452" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0.1431005" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.9403748" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="7.925636E-02" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.8845401" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="RmPreviewDx9.dll" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="4.770017E-02" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.7291312" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.641879E-02" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.4178082" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="RmTextureEditor.dll" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="1.568995" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="1.625213" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.3424658" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="-1" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-3" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-1.737769" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="1" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="-6" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="RmStateEditor.dll" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="1" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.108611" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.561644" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="FLOAT" CURRENT="0.1997622" DESC="TOP" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.6753864" DESC="BOTTOM" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.1671827" DESC="LEFT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.5799794" DESC="RIGHT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="-1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WM_HINT" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]></VARIABLE></VARIABLE></VARIABLE></VARIABLE><VARIABLE TYPE="TEXT" DESC="WORKSPACE" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[]]><VARIABLE TYPE="TEXT" DESC="LAST_SAVE" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[17/4/2003 16:0:5]]></VARIABLE><VARIABLE TYPE="TEXT" DESC="VERSION" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[RenderMonkey v0.9 Beta]]></VARIABLE><VARIABLE TYPE="TEXT" DESC="XML_VERSION" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[RenderMonkey v0.8 Beta]]></VARIABLE></VARIABLE></VARIABLE></VARIABLE><EFFECT_GROUP DESC="Pointillistic Butterfly Effect Group" TYPE="TABLE" HIDDEN="FALSE"><VARIABLE TYPE="FLOAT" CURRENT="3" DESC="scale" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0.25"/><FLOAT_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="offset_scale" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="-0.14"/><ELEMENT TYPE="FLOAT" CURRENT="0.14"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="0"/><VECTOR_MAX TYPE="FLOAT" CURRENT="32"/></VARIABLE><COLOR TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="body_color" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0.1713201"/><ELEMENT TYPE="FLOAT" CURRENT="0.1381634"/><ELEMENT TYPE="FLOAT" CURRENT="0.4423077"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></COLOR><TEXTURE TYPE="TEXT" DESC="base_opacityMap" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\Butterfly\Iridescence-Base-OpacityMap.tga]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="dots" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\flowers.tga]]></TEXTURE><STREAM_MAP DESC="Stream Mapping" TYPE="TABLE" HIDDEN="FALSE"><STREAM DESC="TexCoord5" TYPE="TABLE" HIDDEN="FALSE"><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="1"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL></STREAM></STREAM_MAP><MODEL TYPE="TEXT" DESC="wings" HIDDEN="FALSE"><![CDATA[..\..\Media\Models\Butterfly\Wings.3ds]]></MODEL><MODEL TYPE="TEXT" DESC="body" HIDDEN="FALSE"><![CDATA[..\..\Media\Models\Butterfly\Body.3ds]]></MODEL><EFFECT DESC="Pointillistic Butterfly HLSL" TYPE="TABLE" CURRENT_EFFECT="TRUE" HIDDEN="FALSE"><PASS DESC="Pointillistic Wings Pass" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[wings]]></MODEL_REF><VERTEX_SHADER DESC="Vertex Shader" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos   : POSITION;
   float2 Tex   : TEXCOORD0;
};

VS_OUTPUT main( float4 Pos      : POSITION,
                float2 Tex      : TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   // Output transformed vertex position:
   Out.Pos = mul( view_proj_matrix, Pos );

   // Propagate input texture coordinates:
   Out.Tex = Tex;

   return Out;
}





]]></CODE><CONSTANT TYPE="TABLE" DESC="view_proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="Pixel Shader" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[//=====================================================================================//
// Pointillistic Butterfly Pixel shader - Kevin Buchin, Maike Walther                  //
//=====================================================================================//
float4 main( float2 Tex : TEXCOORD0) : COLOR
{

   // calculate offset: "offset_scale" is the relative size of the dots/strokes/marks in
   // the offset texture. If the texture coordinates for the offset texture are scaled 
   // by "scale" the relative size "offset_scale" has to be adjusted by dividing through
   // "scale" 
   float2 offset = (tex2D(dots, Tex.xy*scale).xy - 0.5)*offset_scale.xy/scale;
   float2 TexNew = Tex - offset;

   return float4(tex2D( base_opacityMap, TexNew ).xyz, 1);

}

























]]></CODE><CONSTANT TYPE="TABLE" DESC="scale"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset_scale"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><SAMPLER TYPE="TABLE" DESC="base_opacityMap"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="dots"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[base_opacityMap]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAXANISOTROPY" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="10"/><VALUE TYPE="UINT" CURRENT="16"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 1" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="3"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[dots]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAXMIPLEVEL" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="9"/><VALUE TYPE="UINT" CURRENT="0"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS><PASS DESC="Butterfly Body Pass" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[body]]></MODEL_REF><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos: POSITION;
};
VS_OUTPUT main( float4 Pos: POSITION )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 
   Out.Pos = mul( view_proj_matrix, Pos );
   return Out;
}
]]></CODE><CONSTANT TYPE="TABLE" DESC="view_proj_matrix"><REGISTER TYPE="INT" CURRENT="0"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_4" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main( float4 Diff: COLOR0 ) : COLOR
{
    return body_color;
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="body_color"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT></PIXEL_SHADER><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT></EFFECT_GROUP><EFFECT_GROUP DESC="Threshold Hatching Effect Group" TYPE="TABLE" HIDDEN="FALSE"><VARIABLE TYPE="FLOAT" CURRENT="0.2" DESC="Ka" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.5" DESC="Kd" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="0.3" DESC="Ks" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0"/><FLOAT_MAX TYPE="FLOAT" CURRENT="1"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2.5" DESC="n_specular" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0"/><FLOAT_MAX TYPE="FLOAT" CURRENT="100"/></VARIABLE><VARIABLE TYPE="FLOAT" CURRENT="2" DESC="texture_scale" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="1"/><FLOAT_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="lightDir" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="-1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="offset0" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0.08"/><ELEMENT TYPE="FLOAT" CURRENT="0.38"/><ELEMENT TYPE="FLOAT" CURRENT="0.26"/><ELEMENT TYPE="FLOAT" CURRENT="0.02"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="offset1" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0.12"/><ELEMENT TYPE="FLOAT" CURRENT="0.18"/><ELEMENT TYPE="FLOAT" CURRENT="0.25"/><ELEMENT TYPE="FLOAT" CURRENT="0.5"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><COLOR TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="ambient" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0.7725491"/><ELEMENT TYPE="FLOAT" CURRENT="0.7764707"/><ELEMENT TYPE="FLOAT" CURRENT="0.6666667"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></COLOR><COLOR TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="diffuse" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0.2352941"/><ELEMENT TYPE="FLOAT" CURRENT="0.2352941"/><ELEMENT TYPE="FLOAT" CURRENT="0.2"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></COLOR><COLOR TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="specular" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0.7882354"/><ELEMENT TYPE="FLOAT" CURRENT="1"/></COLOR><TEXTURE TYPE="TEXT" DESC="threshold_lookup" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\lookup.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="short_stroke" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\short_stroke1.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="long_stroke" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\long_stroke1.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="index" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\index.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="threshold_hatching" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\threshold_hatching.dds]]></TEXTURE><STREAM_MAP DESC="Stream Mapping" TYPE="TABLE" HIDDEN="FALSE"><STREAM DESC="TexCoord5" TYPE="TABLE" HIDDEN="FALSE"><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="3"/><CHANNEL_REG TYPE="UINT" CURRENT="1"/><CHANNEL_USAGE TYPE="UINT" CURRENT="10"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="2"/><CHANNEL_USAGE TYPE="UINT" CURRENT="3"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="3"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="4"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="1"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="2"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="6"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="3"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="7"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="4"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="8"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="5"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="9"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="6"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="10"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="7"/></STREAM_CHANNEL></STREAM></STREAM_MAP><MODEL TYPE="TEXT" DESC="model" HIDDEN="FALSE"><![CDATA[..\..\Media\Models\teapot.3ds]]></MODEL><EFFECT DESC="specular highlight lookup" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[model]]></MODEL_REF><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos    : POSITION;
   float2 Tex0   : TEXCOORD0;
   float2 Tex3   : TEXCOORD3;
   float3 Norm   : TEXCOORD5;
   float3 View   : TEXCOORD6;
   float3 Light  : TEXCOORD7;
};
VS_OUTPUT main( 
   float4 inPos  : POSITION,
   float3 inNorm : NORMAL,
   float2 Tex  : TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   // Output transformed position:
   Out.Pos = mul( view_proj_matrix, inPos ); 
   
   // Output light vector:
   Out.Light = -normalize(lightDir);

   // Compute position in view space:
   float3 Pview = mul( view_matrix, inPos ); 

   // Transform the input normal to view space:
   Out.Norm = normalize( mul( view_matrix, inNorm ) );   
 
   // Compute the view direction in view space:
   Out.View = - normalize( Pview );

   // Propagate the texture coordinates for the object:
   Out.Tex0 = texture_scale.xx*float2(-Tex.x, Tex.y);
   Out.Tex3 = texture_scale.xx*float2(-Tex.y, -Tex.x) + offset1.xy;

   return Out;
}
]]></CODE><CONSTANT TYPE="TABLE" DESC="view_proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="lightDir"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset0"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset1"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="texture_scale"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main( float4 Diff   : COLOR0,
   float2 Tex0   : TEXCOORD0,
   float2 Tex3   : TEXCOORD3,
   float3 Normal   : TEXCOORD5,
   float3 View   : TEXCOORD6,
   float3 Light  : TEXCOORD7 ) : COLOR
{
   // Compute lighting
   float3 vReflect = normalize( 2 * dot( Normal, Light) * Normal - Light );       
   float4 AmbientColor = ambient;
   float4 DiffuseColor = Kd * max( 0, dot( Normal, Light ));
   float4 SpecularColor = Ks * pow( max( 0, dot(vReflect, View)), n_specular );
 
   // Compute Strokes
   float4 lookup = tex2D(threshold_lookup, Tex0);
   lookup.xy = (lookup.xy - 0.25)*2;
   float2 stroke = tex2D(index, Tex0);
   float4 stroke_color = tex2D(long_stroke, lookup.xy);

   float fade_in = max(0, max(stroke.y - 0.95, 0.05 - stroke.y)*20);
  
   bool stroke_flag = (lookup.w > 0.9)&&((lookup.z/6.0 > DiffuseColor.x-0.2)||(lookup.z/6.0 < SpecularColor.x - 0.1));

   float4 drawing_color = (lookup.z/6.0 < SpecularColor.x - 0.1) ? specular : diffuse; 

   float4 color = stroke_flag ? lerp(AmbientColor, drawing_color, fade_in*(1-stroke_color)) : AmbientColor;

   lookup = tex2D(threshold_lookup, Tex3);
   lookup.xy = (lookup.xy - 0.25)*2;
   stroke = tex2D(index, Tex3);
   stroke_color = tex2D(long_stroke, lookup.xy);
   fade_in = max(0, max(stroke.y - 0.95, 0.05 - stroke.y)*20);
   stroke_flag = (lookup.w > 0.9) && (lookup.z/6.0 > DiffuseColor.x);
   color = stroke_flag ?  lerp(color, diffuse, fade_in*(1-stroke_color)) : color;

   return color;
}

]]></CODE><CONSTANT TYPE="TABLE" DESC="Kd"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="Ka"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="diffuse"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="ambient"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="specular"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="n_specular"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="Ks"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><SAMPLER TYPE="TABLE" DESC="index"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="long_stroke"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="short_stroke"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="threshold_lookup"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[threshold_lookup]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 1" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="1"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[long_stroke]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_BORDERCOLOR" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="4"/><VALUE TYPE="UINT" CURRENT="2147483647"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 2" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="2"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[short_stroke]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_BORDERCOLOR" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="4"/><VALUE TYPE="UINT" CURRENT="2147483647"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 3" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="3"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[index]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="lookup hatching" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[model]]></MODEL_REF><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float4 Diff : COLOR0;
   float2 Tex0 : TEXCOORD0;
   float2 Tex1 : TEXCOORD1;
   float2 Tex3 : TEXCOORD3;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float3 Norm : NORMAL,
   float2 Tex : TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 
   float3 L = -normalize(lightDir);

   float3 N = normalize(mul(view_matrix, Norm)); // normal (view space)

   Out.Pos = mul(view_proj_matrix, Pos); 
   Out.Diff = max(0, dot(N, L)); // diffuse

   // Propagate the texture coordinates for the object:
   Out.Tex0 = texture_scale.xx*float2(-Tex.x, Tex.y);
   Out.Tex1 = texture_scale.xx*float2(-Tex.x, Tex.y) + offset0.xy;
   Out.Tex3 = texture_scale.xx*float2(-Tex.y, -Tex.x) + offset1.xy;

   return Out;
}
]]></CODE><CONSTANT TYPE="TABLE" DESC="view_proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="texture_scale"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset0"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset1"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="lightDir"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 getStrokeColor(float2 texCoord, float threshold) {
   float4 lookup = tex2D(threshold_lookup, texCoord);
   lookup.xy = (lookup.xy - 0.25)*2;

   float2 stroke = tex2D(index, texCoord);
   float4 stroke_color = (stroke.x < 0.5) ? tex2D(short_stroke, lookup.xy) : tex2D(long_stroke, lookup.xy);

   float fade_in = max(stroke.y - 0.95, 0.05 - stroke.y)*20;
   bool stroke_flag = (lookup.w > 0.9) && (lookup.z/6.0 > threshold);
   stroke_color = stroke_flag ? lerp(float4(1.0, 1.0, 1.0, 1.0), stroke_color, fade_in) : float4(1.0, 1.0, 1.0, 1.0);
 
   return  stroke_color;
}

float4 main(    
   float2 Tex0  : TEXCOORD0,
   float2 Tex1  : TEXCOORD1,
   float2 Tex3  : TEXCOORD3,
   float4 Diff : COLOR0 ) : COLOR
{
   float4 color = getStrokeColor(Tex0, Diff.x - 0.65);
   color *= getStrokeColor(Tex1, Diff.x - 0.5);
   color *= getStrokeColor(Tex3, Diff.x - 0.3);

   return color; 

}


]]></CODE><SAMPLER TYPE="TABLE" DESC="index"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="long_stroke"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="short_stroke"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="threshold_lookup"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[threshold_lookup]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 1" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="1"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[long_stroke]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_BORDERCOLOR" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="4"/><VALUE TYPE="UINT" CURRENT="2147483647"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 2" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="2"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[short_stroke]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="4"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_BORDERCOLOR" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="4"/><VALUE TYPE="UINT" CURRENT="2147483647"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 3" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="3"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[index]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="threshold hatching" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[model]]></MODEL_REF><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos    : POSITION;
   float2 Tex0   : TEXCOORD0;
   float2 Tex1   : TEXCOORD1;
   float2 Tex2   : TEXCOORD2;
   float2 Tex3   : TEXCOORD3;
   float2 Tex4   : TEXCOORD4;
   float3 Norm   : TEXCOORD5;
   float3 View   : TEXCOORD6;
   float3 Light  : TEXCOORD7;
};
VS_OUTPUT main( 
   float4 inPos  : POSITION,
   float3 inNorm : NORMAL,
   float2 Tex  : TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   // Output transformed position:
   Out.Pos = mul( view_proj_matrix, inPos ); 
   
   // Output light vector:
   Out.Light = -normalize(lightDir);

   // Compute position in view space:
   float3 Pview = mul( view_matrix, inPos ); 

   // Transform the input normal to view space:
   Out.Norm = normalize( mul( view_matrix, inNorm ) );   
 
   // Compute the view direction in view space:
   Out.View = - normalize( Pview );

   // Propagate the texture coordinates for the object:
   Out.Tex0 = float2(-Tex.x, Tex.y);
   Out.Tex1 = float2(-Tex.x, Tex.y) + offset0.xy;
   Out.Tex2 = float2(-Tex.x, Tex.y) + offset0.zw;
   Out.Tex3 = float2(-Tex.y, -Tex.x) + offset1.xy;
   Out.Tex4 = float2(-Tex.y, -Tex.x) + offset1.zw;

   return Out;
}

]]></CODE><CONSTANT TYPE="TABLE" DESC="offset1"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="lightDir"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="offset0"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main( float4 Diff   : COLOR0,
   float2 Tex0   : TEXCOORD0,
   float2 Tex1   : TEXCOORD1,
   float2 Tex2   : TEXCOORD2,
   float2 Tex3   : TEXCOORD3,
   float2 Tex4   : TEXCOORD4,
   float3 Normal   : TEXCOORD5,
   float3 View   : TEXCOORD6,
   float3 Light  : TEXCOORD7 ) : COLOR
{
   // Compute the reflection vector:
   float3 vReflect = normalize( 2 * dot( Normal, Light) * Normal - Light );       

   // Compute ambient term:
   float4 Intensity = Ka + Kd * max( 0, dot( Normal, Light ))
                         + Ks * pow( max( 0, dot(vReflect, View)), n_specular );

   float2 stroke = tex2D(threshold_hatching, Tex0).ra;
   float color = (Intensity < 5.0/7.0 + stroke.y/7.0) ? stroke.x : 1.0;

   stroke = tex2D(threshold_hatching, Tex1).ra;
   color *= (Intensity < 4.0/7.0 + stroke.y/7.0) ? stroke.x : 1.0;

   stroke = tex2D(threshold_hatching, Tex2).ra;
   color *= (Intensity < 3.0/7.0+ stroke.y/7.0) ? stroke.x : 1.0;

   stroke = tex2D(threshold_hatching, Tex3).ra;
   color *= (Intensity < 2.0/7.0 + stroke.y/7.0) ? stroke.x : 1.0;

   stroke = tex2D(threshold_hatching, Tex4).ra;
   color *= (Intensity < 1.0/7.0 + stroke.y/7.0) ? stroke.x : 1.0;

   stroke = tex2D(threshold_hatching, Tex3.yx).ra;
   color *= (Intensity < stroke.y/7.0) ? stroke.x : 1.0;
   
   return float4(color.x, color.x, color.x, 1.0);
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="Ka"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="Kd"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="Ks"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="n_specular"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><SAMPLER TYPE="TABLE" DESC="threshold_hatching"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[threshold_hatching]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_ADDRESSU" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="1"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSV" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="2"/><VALUE TYPE="UINT" CURRENT="1"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_ADDRESSW" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="3"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPMAPLODBIAS" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="8"/><VALUE TYPE="UINT" CURRENT="3212836864"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT></EFFECT_GROUP><EFFECT_GROUP DESC="Painterly Tree Effect Group" TYPE="TABLE" HIDDEN="FALSE"><VARIABLE TYPE="FLOAT" CURRENT="50" DESC="size" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><FLOAT_CLAMP_FLAG TYPE="INT" CURRENT="1"/><FLOAT_MIN TYPE="FLOAT" CURRENT="0"/><FLOAT_MAX TYPE="FLOAT" CURRENT="100"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="lightDir" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="-1"/><ELEMENT TYPE="FLOAT" CURRENT="-1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="world_up" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="billboard_center" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="50"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-100"/><VECTOR_MAX TYPE="FLOAT" CURRENT="100"/></VARIABLE><TEXTURE TYPE="TEXT" DESC="forest_rgba" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\forest_rgba.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="tree_normals" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\tree_normals.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="tam_weights" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\tam_weights.tga]]></TEXTURE><STREAM_MAP DESC="Stream Mapping" TYPE="TABLE" HIDDEN="FALSE"><STREAM DESC="TexCoord5" TYPE="TABLE" HIDDEN="FALSE"><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="3"/><CHANNEL_REG TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE TYPE="UINT" CURRENT="0"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="1"/><CHANNEL_REG TYPE="UINT" CURRENT="1"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="0"/></STREAM_CHANNEL><STREAM_CHANNEL DESC="" TYPE="TABLE" HIDDEN="FALSE"><CHANNEL_TYPE TYPE="UINT" CURRENT="2"/><CHANNEL_REG TYPE="UINT" CURRENT="2"/><CHANNEL_USAGE TYPE="UINT" CURRENT="5"/><CHANNEL_USAGE_INDEX TYPE="UINT" CURRENT="1"/></STREAM_CHANNEL></STREAM></STREAM_MAP><MODEL TYPE="TEXT" DESC="quad" HIDDEN="FALSE"><![CDATA[..\..\Media\Models\screenAlignedQuad-Noise.3ds]]></MODEL><EFFECT DESC="shaded tree" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
   float3 LightDirT : TEXCOORD1;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n0 = -P.xyz;
   float3 u  = normalize(world_up.xyz);
   float3 r  = normalize(cross(u, n0));
   float3 n  = cross(r, u);
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)
   
   float q = 1/(1 - n.z);
   float3x3 eyeToTangent = float3x3(-n.z -n.y*n.y*q,        n.x*n.y*q,  n.x,
                                    n.x*n.y*q, -n.z - n.x*n.x*q,  n.y,
                                         -n.x,             -n.y, -n.z);

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;
   Out.LightDirT = normalize(mul(eyeToTangent, lightDir));

   return Out;
}






]]></CODE><CONSTANT TYPE="TABLE" DESC="lightDir"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0,
   float3 LightDirT : TEXCOORD1 ) : COLOR
{
   float3 L = -LightDirT;

   float3 N0 = (tex2D(tree_normals, Tex) - float3(0.5, 0.5, 0.5))*float3(2, -2, 2);
   float3 N = normalize(N0);

   float I =  max(0, dot(N, L))*0.5 + 0.5; // diffuse

   return tex2D(forest_rgba, Tex) * float4(I, I, I, 1.0);

}






]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="tree_normals"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 1" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="1"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[tree_normals]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="painterly tree" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><VARIABLE TYPE="VECTOR" VECTOR_TYPE="FLOAT" DESC="lighting_parameters" ARTIST_EDITABLE="FALSE" HIDDEN="FALSE"><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="0"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><ELEMENT TYPE="FLOAT" CURRENT="1"/><VECTOR_NORMALIZE_FLAG TYPE="INT" CURRENT="0"/><VECTOR_CLAMP_FLAG TYPE="INT" CURRENT="0"/><VECTOR_MIN TYPE="FLOAT" CURRENT="-10"/><VECTOR_MAX TYPE="FLOAT" CURRENT="10"/></VARIABLE><TEXTURE TYPE="TEXT" DESC="tree_tam_light" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\tree_tam_light.dds]]></TEXTURE><TEXTURE TYPE="TEXT" DESC="tree_tam_dark" ARTIST_EDITABLE="TRUE" HIDDEN="FALSE"><![CDATA[..\..\Media\Textures\stroke-rendering\tree_tam_dark.dds]]></TEXTURE><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
   float3 LightDirT : TEXCOORD1;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n0 = -P.xyz;
   float3 u  = normalize(world_up.xyz);
   float3 r  = normalize(cross(u, n0));
   float3 n  = cross(r, u);
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)
   
   float q = 1/(1 - n.z);
   float3x3 eyeToTangent = float3x3(-n.z -n.y*n.y*q,        n.x*n.y*q,  n.x,
                                    n.x*n.y*q, -n.z - n.x*n.x*q,  n.y,
                                         -n.x,             -n.y, -n.z);

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;
   Out.LightDirT = normalize(mul(eyeToTangent, lightDir));

   return Out;
}

]]></CODE><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="lightDir"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_2_0" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0,
   float3 LightDirT : TEXCOORD1 ) : COLOR
{
   float3 L = -LightDirT;

   float3 N0 = (tex2D(tree_normals, Tex) - float3(0.5, 0.5, 0.5))*float3(2, -2, 2);
   float3 N = normalize(N0);

   float I =  max(0, dot(N, L))*0.5 + 0.5; // diffuse

   I = (lighting_parameters.z < lighting_parameters.w) ?
      1 - I : I;
   float scaledNegI = (1-I)*0.625+0.0625;

   float3 tam_light_value = tex2D(tree_tam_light, Tex);
   float3 tam_dark_value  = tex2D(tree_tam_dark,  Tex);

   float3 tam_light_weight = tex2D(tam_weights, float2(scaledNegI, 0));
   float3 tam_dark_weight  = tex2D(tam_weights, float2(scaledNegI - 0.375, 0));
   
   float tam_intensity = 1.0 - (dot(tam_light_value, tam_light_weight)+ dot(tam_dark_value, tam_dark_weight));

   float4 rgbaColor = tex2D(forest_rgba, Tex);

   float3 backgroundColor = rgbaColor.xyz;
   // LightingParameter.z: 2->white, 1->rgb, 0->black
   backgroundColor = (lighting_parameters.z > 1) 
      ? float3(1.0, 1.0, 1.0) : backgroundColor * lighting_parameters.z;
   
   float3 strokeColor = 0.5 * rgbaColor.xyz;
   // LightingParameter.w: 2->white, 1->rgb, 0->black
   strokeColor = (lighting_parameters.w > 1) 
      ? float3(1.0, 1.0, 1.0) : strokeColor * lighting_parameters.w;

   float4 outColor;
   outColor.xyz = lerp(strokeColor, backgroundColor, tam_intensity);
   outColor.w = rgbaColor.w;

   return outColor;

}




]]></CODE><CONSTANT TYPE="TABLE" DESC="lighting_parameters"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="tam_weights"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="tree_normals"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="tree_tam_dark"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER><SAMPLER TYPE="TABLE" DESC="tree_tam_light"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 1" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="1"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[tree_normals]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 2" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="2"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[tam_weights]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 3" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="3"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[tree_tam_light]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 4" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="4"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[tree_tam_dark]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="screen aligned, view plane aligned billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)
   P.x -= (0.5 - Tex.x) * size;                              // position (view space)
   P.y += (0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}



]]></CODE><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}
]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="screen aligned, viewpoint oriented billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n  = normalize(-P.xyz);
   float3 u0 = float3(0.0, 1.0, 0.0);
   float3 r  = normalize(cross(u0, n));
   float3 u  = cross(n, r);
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}
]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="world-oriented, view plane aligned billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n  = float3(0.0, 0.0, -1.0);
   float3 u0 = world_up.xyz;
   float3 r  = normalize(cross(u0, n));
   float3 u  = cross(n, r);
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}



]]></CODE><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_4" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}

]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="world-oriented, viewpoint oriented billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n  = normalize(-P.xyz);
   float3 u0 = world_up.xyz;
   float3 r  = normalize(cross(u0, n));
   float3 u  = cross(n, r);
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}

]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="axial, view plan aligned billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n0 = float3(0.0, 0.0, -1.0);
   float3 u  = normalize(world_up.xyz);
   float3 r  = normalize(cross(u, n0));
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}

]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT><EFFECT DESC="axial, viewpoint oriented billboarding" TYPE="TABLE" CURRENT_EFFECT="FALSE" HIDDEN="FALSE"><PASS DESC="Pass 1" TYPE="TABLE" PASS_DISABLED="FALSE" HIDDEN="FALSE"><MODEL_REF TYPE="TEXT" DESC="Model Ref" HIDDEN="FALSE"><![CDATA[quad]]></MODEL_REF><RENDER_STATE_BLOCK DESC="Render State" TYPE="TABLE" HIDDEN="FALSE"><RENDER_STATE DESC="D3DRS_SRCBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="19"/><VALUE TYPE="UINT" CURRENT="5"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_DESTBLEND" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="20"/><VALUE TYPE="UINT" CURRENT="6"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_CULLMODE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="22"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE><RENDER_STATE DESC="D3DRS_ALPHABLENDENABLE" TYPE="TABLE" HIDDEN="FALSE"><STATE TYPE="UINT" CURRENT="27"/><VALUE TYPE="UINT" CURRENT="1"/></RENDER_STATE></RENDER_STATE_BLOCK><VERTEX_SHADER DESC="vs" TYPE="TABLE" ASM="FALSE" TARGET="vs_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[struct VS_OUTPUT
{
   float4 Pos  : POSITION;
   float2 Tex  : TEXCOORD0;
};
VS_OUTPUT main( 
   float4 Pos: POSITION,
   float2 Tex: TEXCOORD0 )
{
   VS_OUTPUT Out = (VS_OUTPUT) 0; 

   float4 P = mul(view_matrix, billboard_center);          // position of the center(view space)

   float3 n0 = -P.xyz;
   float3 u  = normalize(world_up.xyz);
   float3 r  = normalize(cross(u, n0));
 
   P.xyz += r*(0.5 - Tex.x) * size;                              // position (view space)
   P.xyz += u*(0.5 - Tex.y) * size;                              // position (view space)

   Out.Pos = mul(proj_matrix, P); 
   Out.Tex = Tex;

   return Out;
}


]]></CODE><CONSTANT TYPE="TABLE" DESC="billboard_center"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="size"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="proj_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="world_up"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="1"/></CONSTANT><CONSTANT TYPE="TABLE" DESC="view_matrix"><REGISTER TYPE="INT" CURRENT="-1"/><COUNT TYPE="INT" CURRENT="4"/></CONSTANT></VERTEX_SHADER><PIXEL_SHADER DESC="ps" TYPE="TABLE" ASM="FALSE" TARGET="ps_1_1" ENTRYPOINT="main" HIDDEN="FALSE"><CODE TYPE="TEXT"><![CDATA[float4 main(    
   float2 Tex  : TEXCOORD0 ) : COLOR
{

   return tex2D(forest_rgba, Tex);

}
]]></CODE><SAMPLER TYPE="TABLE" DESC="forest_rgba"><REGISTER TYPE="INT" CURRENT="-1"/></SAMPLER></PIXEL_SHADER><TEXTURE_OBJECT TYPE="TABLE" DESC="Texture 0" HIDDEN="FALSE"><TEXTURE_UNIT TYPE="INT" CURRENT="0"/><TEXTURE_REF TYPE="TEXT" DESC="Texture Ref" HIDDEN="FALSE"><![CDATA[forest_rgba]]></TEXTURE_REF><SAMPLER_STATE DESC="D3DSAMP_MAGFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="5"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MINFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="6"/><VALUE TYPE="UINT" CURRENT="2"/></SAMPLER_STATE><SAMPLER_STATE DESC="D3DSAMP_MIPFILTER" TYPE="TABLE" HIDDEN="TRUE"><STATE TYPE="UINT" CURRENT="7"/><VALUE TYPE="UINT" CURRENT="3"/></SAMPLER_STATE></TEXTURE_OBJECT><STREAM_MAP_REF TYPE="TEXT" DESC="Stream Map Ref" HIDDEN="FALSE"><![CDATA[Stream Mapping]]></STREAM_MAP_REF></PASS></EFFECT></EFFECT_GROUP></WORKSPACE></RENDER_MONKEY>
