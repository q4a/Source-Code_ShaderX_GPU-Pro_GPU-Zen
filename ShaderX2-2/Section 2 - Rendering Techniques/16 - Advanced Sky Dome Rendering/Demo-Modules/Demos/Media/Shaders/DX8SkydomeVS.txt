
	//
	// Vertex Shader (for DX8 hardware and better)
	// Author: Marco Spoerl
	//
	// Function:  Sky dome
	//
	// v0			= position			(3 floats)
	// v1			= normal			(3 floats)
	//
	// c0 - c4		= proj matrix * view matrix
	// c5 - c7		= view matrix * proj matrix * texspace matrix (sun projector)
	// c8 - c10		= view matrix * proj matrix * texspace matrix (moon projector)
	// c11			= sun color (red, green, blue, 0.0f)
	// c12			= sun normal (sunN.x, sunN.y, sunN.z, 0.0f)
	// c13			= constants (KrRed, KrGreen, KrBlue, 0.0f)
	// c14			= constants (KmRed, KmGreen, KmBlue, 0.0f)
	// c15			= constants (0.0f, 1.0f, 0.65f, 0.9f)
	// c16			= constants (-1000.0f*fInvR*fInvR, 3000.0f, 0.0f, 2.0f)
	// c17			= lightvec sun->moon (light.x, light.y, light.z, 0.5f)
	//

	//
	// version instruction
	//
	vs_1_1

	//
	// declare registers
	//
	dcl_position		v0
	dcl_normal		v1

	//
	// transform position
	//
	dp4	oPos.x,		v0, c0
	dp4	oPos.y,		v0, c1

	//
	// simply force z to 1.0f by making it equal to w
	//
	dp4	oPos.zw,	v0, c3

	//
	// calculate steps
	//
	mul	r0.x,		v0.y, v0.y
	mad	r0.xw,		r0.x, c16.xxzz, c16.yyww

	//
	// calc angle normal - sun normal
	//
	dp3	r0.y, 		v1, c12

	//
	// calculate fr (molecule scattering)
	//
	lit	r3.z, 		r0.yyww
	mad	r4.x, 		r3.z, c15.z, c15.z

	//
	// calculate fm (aerosol scattering)
	//
	max	r6.x,		r0.y, -r0.y
	sge	r6.x,		r6.x, c15.y
	add	r5.x,		r6.x, c15.z

	//
	// calculate the color regarding to the scattering values
	//

	//
	// KR color of the molocules
	//
	mul	r7.xyz,		c13, r4.x

	//
	// KM color of the aerosoles
	//
	mad	r9.xyz,		c14, r5.x, r7

	//
	// scale by steps
	//
	mul	r9.xyz,		r9.xyz, r0.x

	//
	// output color
	//
	mul	oD0,		r9.xyzz, c11

	//
	// output transformed light vector for the moon phase
	//
	mov	r10,		c17
	mad	oD1.xyz,	-r10.xyz, c17.w, c17.w

	//
	// output projected texcoord0 (sun)
	//
	dp4	oT0.x,		v0, c5
	dp4	oT0.y,		v0, c6
	dp4	r0.zw,		v0, c7
	sge	r1.w,		r0.w, c15.x
	mul	oT0.zw,		r0, r1.w

	//
	// output projected texcoord1/2 (moon/moonnormals)
	//
	dp4	r2.x,		v0, c8
	dp4	r2.y,		v0, c9
	dp4	r0.zw,		v0, c10
	sge	r1.w,		r0.w, c15.x
	mul	r2.zw,		r0, r1.w
	mov	oT1,		r2
	mov	oT2,		r2