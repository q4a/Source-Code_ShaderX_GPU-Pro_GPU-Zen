
/*  A Bison parser, made from script.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IMPORT	258
#define	BREAK	259
#define	STATIC	260
#define	REGISTER	261
#define	VERTEXSHADER	262
#define	INPUT	263
#define	OUTPUT	264
#define	CONST	265
#define	CASE	266
#define	CATCH	267
#define	CONTINUE	268
#define	PLUGIN	269
#define	DEFAULT	270
#define	DO	271
#define	ELSE	272
#define	FOR	273
#define	IF	274
#define	RADICAL	275
#define	RESERVE	276
#define	TEMP	277
#define	NULLLITERAL	278
#define	RETURN	279
#define	THROW	280
#define	TRY	281
#define	SWITCH	282
#define	WHILE	283
#define	ELLIPSIS	284
#define	OPT0	285
#define	OPT1	286
#define	OPT2	287
#define	OPT10	288
#define	INCLUDE	289
#define	DEFINE	290
#define	UNDEFINE	291
#define	DEFELSE	292
#define	IFDEF	293
#define	IFNDEF	294
#define	ENDIF	295
#define	ADD	296
#define	DP3	297
#define	DP4	298
#define	DST	299
#define	EXPP	300
#define	LIT	301
#define	LOGP	302
#define	MAD	303
#define	MAX	304
#define	MIN	305
#define	MOV	306
#define	MUL	307
#define	RCP	308
#define	RSQ	309
#define	SGE	310
#define	SLT	311
#define	SUB	312
#define	EXP	313
#define	FRC	314
#define	LOG	315
#define	M3X2	316
#define	M3X3	317
#define	M3X4	318
#define	M4X3	319
#define	M4X4	320
#define	MODIFIER	321
#define	CLASS	322
#define	PRIVATE	323
#define	PROTECTED	324
#define	PUBLIC	325
#define	ILITERAL	326
#define	FLITERAL	327
#define	SLITERAL	328
#define	AREGISTER	329
#define	TREGISTER	330
#define	CREGISTER	331
#define	IREGISTER	332
#define	OREGISTER	333
#define	IDENT	334
#define	CLASS_IDENT	335
#define	VOID	336
#define	CHAR	337
#define	BYTE	338
#define	SHORT	339
#define	WORD	340
#define	LONG	341
#define	INT	342
#define	FLOAT	343
#define	VECTOR	344
#define	STRING	345
#define	IVERTEX	346
#define	OVERTEX	347
#define	SET_ADD	348
#define	SET_SUB	349
#define	SET_DIV	350
#define	SET_MOD	351
#define	SET_MUL	352
#define	SET_AND	353
#define	SET_OR	354
#define	SET_XOR	355
#define	SET_SHL	356
#define	SET_SHR	357
#define	LOR	358
#define	LAND	359
#define	EQ	360
#define	NE	361
#define	LE	362
#define	GE	363
#define	SHL	364
#define	SHR	365
#define	UPLUS	366
#define	UMINUS	367
#define	INC	368
#define	DEC	369

#line 1 "script.y"


//$XHEADER
static const char*   __XMEMORY_MODULE_NAME__ = __FILE__;
#include <globals/memory/xmemory.h>

#include <malloc.h>

#include "compiler.h"

extern CCompiler      *pCompiler;

// forward definitions (because of C++)
int                     yylex();
void                    yyerror(char *err);
extern EScriptError     LastError;


int ParseInclude(const char *fname);


#define YYDEBUG 1


#line 27 "script.y"
typedef union {
   SParameter           *par;
   SCompilerTree        *tree;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		557
#define	YYFLAG		-32768
#define	YYNTBASE	142

#define YYTRANSLATE(x) ((unsigned)(x) <= 369 ? yytranslate[x] : 191)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   136,     2,    36,   138,   128,   117,     2,   131,
    32,   129,   126,    30,   127,   133,   130,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,    31,   120,
   100,   122,   111,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   132,   141,    33,   116,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    34,   115,    35,   137,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   113,   114,   118,
   119,   121,   123,   124,   125,   134,   135,   139,   140
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     7,     9,    11,    13,    15,    17,    19,
    22,    24,    26,    28,    32,    37,    43,    50,    51,    53,
    57,    59,    63,    64,    66,    70,    71,    75,    78,    82,
    83,    85,    93,    97,   101,   106,   107,   110,   113,   115,
   117,   119,   121,   123,   125,   126,   129,   132,   134,   136,
   138,   140,   142,   146,   150,   152,   154,   156,   159,   162,
   167,   170,   174,   180,   183,   186,   188,   190,   192,   194,
   202,   210,   218,   226,   232,   238,   244,   254,   262,   270,
   276,   284,   290,   296,   304,   312,   320,   326,   332,   338,
   346,   354,   362,   370,   378,   381,   386,   388,   392,   396,
   402,   406,   410,   414,   418,   422,   429,   436,   443,   450,
   455,   460,   465,   474,   481,   488,   493,   500,   505,   510,
   517,   524,   531,   536,   541,   546,   553,   560,   567,   574,
   581,   587,   593,   595,   597,   601,   605,   609,   613,   617,
   621,   631,   641,   649,   657,   661,   666,   669,   674,   678,
   682,   684,   688,   693,   700,   707,   710,   713,   714,   718,
   719,   721,   723,   727,   733,   741,   751,   753,   755,   757,
   759,   761,   763,   765,   767,   769,   771,   775,   777,   781,
   783,   787,   789,   793,   796,   800,   802,   806,   810,   814
};

static const short yyrhs[] = {   143,
     0,   143,   142,     0,   170,     0,   158,     0,   159,     0,
   157,     0,   148,     0,   165,     0,   144,     0,   147,    31,
     0,    22,     0,    10,     0,    79,     0,    79,    30,   146,
     0,    79,   133,   133,   146,     0,    21,   145,   131,   146,
    32,     0,   185,    86,   131,   149,    32,   165,     0,     0,
   151,     0,   185,   188,   154,     0,   150,     0,   150,    30,
   151,     0,     0,   155,     0,   185,   188,   154,     0,     0,
   132,    79,    33,     0,   153,    31,     0,   153,    31,   155,
     0,     0,    20,     0,   156,    14,    86,   131,   149,    32,
    31,     0,     8,   160,    31,     0,     9,   160,    31,     0,
     7,    34,   152,    35,     0,     0,   162,   161,     0,   189,
    31,     0,   171,     0,   172,     0,   167,     0,   166,     0,
   170,     0,     1,     0,     0,   164,   163,     0,   189,    31,
     0,   171,     0,   172,     0,   167,     0,   166,     0,     1,
     0,    34,   161,    35,     0,    24,   176,    31,     0,    31,
     0,   142,     0,   163,     0,    45,    86,     0,    46,    86,
     0,    41,   120,   190,   122,     0,    41,    80,     0,   169,
   168,    47,     0,   169,   168,    44,   168,    47,     0,    42,
    86,     0,    43,    86,     0,    37,     0,    38,     0,    39,
     0,    40,     0,    48,   173,    30,   176,    30,   176,    31,
     0,    49,   173,    30,   176,    30,   176,    31,     0,    50,
   173,    30,   176,    30,   176,    31,     0,    51,   173,    30,
   176,    30,   176,    31,     0,    52,   173,    30,   176,    31,
     0,    53,   173,    30,   176,    31,     0,    54,   173,    30,
   176,    31,     0,    55,   173,    30,   176,    30,   176,    30,
   176,    31,     0,    56,   173,    30,   176,    30,   176,    31,
     0,    57,   173,    30,   176,    30,   176,    31,     0,    58,
   173,    30,   176,    31,     0,    59,   173,    30,   176,    30,
   176,    31,     0,    60,   173,    30,   176,    31,     0,    61,
   173,    30,   176,    31,     0,    62,   173,    30,   176,    30,
   176,    31,     0,    63,   173,    30,   176,    30,   176,    31,
     0,    64,   173,    30,   176,    30,   176,    31,     0,    65,
   173,    30,   176,    31,     0,    66,   173,    30,   176,    31,
     0,    67,   173,    30,   176,    31,     0,    68,   173,    30,
   176,    30,   176,    31,     0,    69,   173,    30,   176,    30,
   176,    31,     0,    70,   173,    30,   176,    30,   176,    31,
     0,    71,   173,    30,   176,    30,   176,    31,     0,    72,
   173,    30,   176,    30,   176,    31,     0,   174,    31,     0,
    86,   131,   179,    32,     0,    86,     0,    86,   133,    86,
     0,    99,   133,    86,     0,    99,   133,    86,   133,    86,
     0,   173,   100,   176,     0,   173,   101,   176,     0,   173,
   102,   176,     0,   173,   105,   176,     0,   173,   103,   176,
     0,    48,   131,   176,    30,   176,    32,     0,    49,   131,
   176,    30,   176,    32,     0,    50,   131,   176,    30,   176,
    32,     0,    51,   131,   176,    30,   176,    32,     0,    52,
   131,   176,    32,     0,    53,   131,   176,    32,     0,    54,
   131,   176,    32,     0,    55,   131,   176,    30,   176,    30,
   176,    32,     0,    56,   131,   176,    30,   176,    32,     0,
    57,   131,   176,    30,   176,    32,     0,    58,   131,   176,
    32,     0,    59,   131,   176,    30,   176,    32,     0,    60,
   131,   176,    32,     0,    61,   131,   176,    32,     0,    62,
   131,   176,    30,   176,    32,     0,    63,   131,   176,    30,
   176,    32,     0,    64,   131,   176,    30,   176,    32,     0,
    65,   131,   176,    32,     0,    66,   131,   176,    32,     0,
    67,   131,   176,    32,     0,    68,   131,   176,    30,   176,
    32,     0,    69,   131,   176,    30,   176,    32,     0,    70,
   131,   176,    30,   176,    32,     0,    71,   131,   176,    30,
   176,    32,     0,    72,   131,   176,    30,   176,    32,     0,
   176,   129,   176,   126,   176,     0,   176,   126,   176,   129,
   176,     0,   177,     0,   175,     0,   175,   133,    86,     0,
   176,   126,   176,     0,   176,   127,   176,     0,   176,   130,
   176,     0,   176,   129,   176,     0,   176,   128,   176,     0,
   131,   176,   123,   176,   111,   176,   112,   176,    32,     0,
   131,   176,   120,   176,   111,   176,   112,   176,    32,     0,
   131,   176,   123,   176,   111,   176,    32,     0,   131,   176,
   120,   176,   111,   176,    32,     0,   177,   133,    86,     0,
    86,   131,   179,    32,     0,    86,   178,     0,    87,   133,
    86,   178,     0,    98,   133,    86,     0,    99,   133,    86,
     0,   182,     0,   131,   176,    32,     0,    95,   131,   176,
    32,     0,    95,   131,   176,    32,   133,    86,     0,    96,
   131,   176,    32,   133,    86,     0,   126,   176,     0,   127,
   176,     0,     0,   132,   176,    33,     0,     0,   180,     0,
   176,     0,   176,    30,   180,     0,   131,    79,    30,    79,
    32,     0,   131,    79,    30,    79,    30,    79,    32,     0,
   131,    79,    30,    79,    30,    79,    30,    79,    32,     0,
    78,     0,    79,     0,   181,     0,     6,     0,    10,     0,
    88,     0,    95,     0,    96,     0,   184,     0,    86,     0,
    86,   100,   176,     0,   186,     0,   186,    30,   187,     0,
    86,     0,    86,   100,   182,     0,   186,     0,   186,    30,
   187,     0,   185,   187,     0,   183,   185,   187,     0,    86,
     0,    86,   133,   190,     0,    86,   130,   190,     0,    86,
   141,   190,     0,    86,   127,   190,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   226,   231,   238,   239,   240,   241,   242,   243,   244,   250,
   252,   253,   255,   256,   260,   267,   275,   278,   279,   282,
   286,   287,   291,   292,   295,   298,   299,   302,   303,   312,
   313,   315,   322,   324,   326,   333,   334,   336,   337,   338,
   339,   340,   341,   342,   346,   347,   349,   350,   351,   352,
   353,   354,   358,   360,   362,   368,   371,   373,   374,   376,
   380,   385,   390,   396,   397,   398,   399,   400,   401,   408,
   409,   410,   411,   412,   413,   414,   415,   417,   418,   419,
   420,   421,   422,   423,   424,   425,   427,   428,   429,   430,
   431,   432,   433,   434,   440,   444,   446,   447,   451,   452,
   457,   458,   459,   460,   462,   469,   470,   471,   472,   473,
   474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
   484,   485,   487,   488,   489,   490,   491,   492,   493,   494,
   498,   499,   501,   505,   506,   509,   510,   511,   515,   516,
   520,   522,   525,   526,   529,   535,   537,   541,   547,   548,
   552,   553,   554,   555,   556,   557,   558,   561,   562,   568,
   569,   572,   573,   579,   586,   594,   605,   606,   609,   615,
   616,   618,   619,   620,   622,   624,   625,   631,   632,   634,
   635,   637,   638,   640,   641,   648,   649,   655,   661,   667
};

static const char * const yytname[] = {   "$","error","$undefined.","IMPORT",
"BREAK","STATIC","REGISTER","VERTEXSHADER","INPUT","OUTPUT","CONST","CASE","CATCH",
"CONTINUE","PLUGIN","DEFAULT","DO","ELSE","FOR","IF","RADICAL","RESERVE","TEMP",
"NULLLITERAL","RETURN","THROW","TRY","SWITCH","WHILE","ELLIPSIS","','","';'",
"')'","']'","'{'","'}'","'#'","OPT0","OPT1","OPT2","OPT10","INCLUDE","DEFINE",
"UNDEFINE","DEFELSE","IFDEF","IFNDEF","ENDIF","ADD","DP3","DP4","DST","EXPP",
"LIT","LOGP","MAD","MAX","MIN","MOV","MUL","RCP","RSQ","SGE","SLT","SUB","EXP",
"FRC","LOG","M3X2","M3X3","M3X4","M4X3","M4X4","MODIFIER","CLASS","PRIVATE",
"PROTECTED","PUBLIC","ILITERAL","FLITERAL","SLITERAL","AREGISTER","TREGISTER",
"CREGISTER","IREGISTER","OREGISTER","IDENT","CLASS_IDENT","VOID","CHAR","BYTE",
"SHORT","WORD","LONG","INT","FLOAT","VECTOR","STRING","IVERTEX","OVERTEX","'='",
"SET_ADD","SET_SUB","SET_DIV","SET_MOD","SET_MUL","SET_AND","SET_OR","SET_XOR",
"SET_SHL","SET_SHR","'?'","':'","LOR","LAND","'|'","'^'","'&'","EQ","NE","'<'",
"LE","'>'","GE","SHL","SHR","'+'","'-'","'%'","'*'","'/'","'('","'['","'.'",
"UPLUS","UMINUS","'!'","'~'","'$'","INC","DEC","'\\\\'","program","root_stmt",
"spec_stmt","reserve_type","reserve_param","reserve_stmt","func_def_stmt","argument_list",
"argument","not_empty_argument_list","class_argument_list","class_argument",
"argument_array_def","not_empty_class_argument_list","plugin_type","plugin_stmt",
"input_definition","output_definition","class_definition","statements","stmt",
"purestatements","purestmt","block","return_stmt","empty_stmt","precompiler_block",
"precompiler_ifdef","precompiler_stmt","assembler_stmt","expr_stmt","lparam",
"set_expr","expr_asm_funct","expr","unary_expr","array_access","expr_list","not_empty_expr_list",
"vectorconst","literal","storage_type","basic_type","var_type","def_var","def_var_list",
"def_const_var","definition","filename","definition"
};
#endif

static const short yyr1[] = {     0,
   142,   142,   143,   143,   143,   143,   143,   143,   143,   144,
   145,   145,   146,   146,   146,   147,   148,   149,   149,   150,
   151,   151,   152,   152,   153,   154,   154,   155,   155,   156,
   156,   157,   158,   159,   160,   161,   161,   162,   162,   162,
   162,   162,   162,   162,   163,   163,   164,   164,   164,   164,
   164,   164,   165,   166,   167,   168,   168,   169,   169,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   172,   172,   173,   173,   173,   173,
   174,   174,   174,   174,   174,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
    -1,    -1,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   178,   178,   179,
   179,   180,   180,   181,   181,   181,   182,   182,   182,   183,
   183,   184,   184,   184,   185,   186,   186,   187,   187,   188,
   188,    -1,    -1,   189,   189,   190,   190,   190,   190,   190
};

static const short yyr2[] = {     0,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
     1,     1,     1,     3,     4,     5,     6,     0,     1,     3,
     1,     3,     0,     1,     3,     0,     3,     2,     3,     0,
     1,     7,     3,     3,     4,     0,     2,     2,     1,     1,
     1,     1,     1,     1,     0,     2,     2,     1,     1,     1,
     1,     1,     3,     3,     1,     1,     1,     2,     2,     4,
     2,     3,     5,     2,     2,     1,     1,     1,     1,     7,
     7,     7,     7,     5,     5,     5,     9,     7,     7,     5,
     7,     5,     5,     7,     7,     7,     5,     5,     5,     7,
     7,     7,     7,     7,     2,     4,     1,     3,     3,     5,
     3,     3,     3,     3,     3,     6,     6,     6,     6,     4,
     4,     4,     8,     6,     6,     4,     6,     4,     4,     6,
     6,     6,     4,     4,     4,     6,     6,     6,     6,     6,
     5,     5,     1,     1,     3,     3,     3,     3,     3,     3,
     9,     9,     7,     7,     3,     4,     2,     4,     3,     3,
     1,     3,     4,     6,     6,     2,     2,     0,     3,     0,
     1,     1,     3,     5,     7,     9,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     3,     1,
     3,     1,     3,     2,     3,     1,     3,     3,     3,     3
};

static const short yydefact[] = {    30,
     0,     0,    31,     0,     0,    66,    67,    68,    69,     0,
     0,     0,     0,     0,   172,   173,   174,     1,     9,     0,
     7,     0,     6,     4,     5,     8,     0,     3,   175,     0,
     0,     0,     0,    12,    11,     0,    44,   170,   171,     0,
    55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    97,     0,     0,     0,
    42,    41,    43,    39,    40,     0,     0,     0,     0,     0,
    61,     0,    64,    65,    58,    59,     2,    10,     0,    52,
    56,    57,     0,    51,    50,     0,    48,    49,     0,     0,
     0,    23,    33,    34,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   167,   168,   158,     0,     0,     0,     0,     0,     0,     0,
     0,   134,     0,   133,   169,   151,    97,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   160,     0,     0,    53,    37,     0,     0,     0,
     0,     0,    95,     0,   176,   178,   184,    38,   186,     0,
     0,    46,     0,    62,   176,    47,    18,     0,     0,    24,
     0,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,     0,
   147,     0,     0,     0,     0,     0,   156,   157,   168,     0,
     0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   162,     0,   161,    98,    99,   101,   102,
   103,   105,   104,   185,     0,     0,     0,     0,     0,     0,
    60,    18,     0,     0,    21,    19,     0,    35,    28,   180,
    26,     0,     0,    16,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   158,     0,     0,   149,   150,     0,   152,     0,     0,
   135,   136,   137,   140,   139,   138,   145,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    96,     0,   177,   179,   190,   188,   187,
   189,     0,    63,     0,     0,    26,    29,     0,     0,    25,
    14,     0,     0,     0,     0,     0,   110,   111,   112,     0,
     0,     0,   116,     0,   118,   119,     0,     0,     0,   123,
   124,   125,     0,     0,     0,     0,     0,   146,   159,   148,
   153,     0,     0,     0,     0,     0,     0,     0,     0,    74,
    75,    76,     0,     0,     0,    80,     0,    82,    83,     0,
     0,     0,    87,    88,    89,     0,     0,     0,     0,     0,
   163,   100,     0,    17,    22,    20,     0,   181,     0,    15,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
    27,   106,   107,   108,   109,     0,   114,   115,   117,   120,
   121,   122,   126,   127,   128,   129,   130,   154,   155,     0,
     0,     0,    70,    71,    72,    73,     0,    78,    79,    81,
    84,    85,    86,    90,    91,    92,    93,    94,     0,     0,
   165,   144,     0,   143,     0,     0,   113,     0,     0,     0,
    77,   166,   142,   141,     0,     0,     0
};

static const short yydefgoto[] = {    91,
    18,    19,    36,   203,    20,    21,   294,   295,   296,   198,
   199,   390,   200,    22,    23,    24,    25,    32,    69,    70,
    92,    93,    26,    94,    95,    96,    27,    28,    97,    98,
    76,    77,   142,   274,   144,   231,   275,   276,   145,   146,
    78,    29,    79,   186,   187,   301,   100,   190
};

static const short yypact[] = {   233,
    46,    46,-32768,     9,   923,-32768,-32768,-32768,-32768,   -70,
   -30,   -16,    -5,     4,-32768,-32768,-32768,     0,-32768,   -15,
-32768,    77,-32768,-32768,-32768,-32768,   777,-32768,-32768,    11,
    60,    67,    71,-32768,-32768,   -28,-32768,-32768,-32768,  1315,
-32768,   -31,   -31,   -31,   -31,   -31,   -31,   -31,   -31,   -31,
   -31,   -31,   -31,   -31,   -31,   -31,   -31,   -31,   -31,   -31,
   -31,   -31,   -31,   -31,   -31,   -31,   -47,   -27,    93,   923,
-32768,-32768,-32768,-32768,-32768,   135,   106,   -60,    49,   160,
-32768,   110,-32768,-32768,-32768,-32768,-32768,-32768,   111,-32768,
-32768,-32768,   996,-32768,-32768,     7,-32768,-32768,   113,   161,
    69,   -60,-32768,-32768,   122,   112,   115,   116,   117,   119,
   120,   121,   124,   125,   126,   127,   134,   137,   138,   146,
   149,   150,   152,   153,   167,   170,   171,   172,   185,   186,
-32768,-32768,  -102,    75,   187,   188,   131,   163,  1315,  1315,
  1399,   189,   447,   190,-32768,-32768,   191,   236,   296,   297,
   321,   322,   328,   329,   335,   336,   340,   342,   354,   355,
   361,   366,   369,   373,   374,   375,   397,   398,   399,   400,
   402,   403,  1315,   348,   349,-32768,-32768,  1315,  1315,  1315,
  1315,  1315,-32768,    49,   337,   408,-32768,-32768,   -48,   317,
   309,-32768,   850,-32768,   -82,-32768,   -60,   409,   414,-32768,
   379,   -29,   420,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
-32768,   387,  1315,  1315,   388,   389,-32768,-32768,   446,   676,
   391,-32768,  1315,  1315,  1315,  1315,  1315,   415,  1315,  1315,
  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
  1315,  1315,  1315,   -18,   454,-32768,-32768,   352,   184,   184,
   184,   184,   184,-32768,  1315,    49,   110,   110,   110,   110,
-32768,   -60,   455,   474,   470,-32768,   379,-32768,   -60,   407,
   376,   122,   377,-32768,   -13,    -8,    -3,     3,   971,   976,
   981,    17,    22,    27,   991,    32,  1001,  1009,   133,   159,
   165,  1037,  1042,  1047,   204,   209,   214,   219,   252,   479,
  1232,   380,  1053,  1058,-32768,-32768,   436,-32768,  1315,  1315,
-32768,   -55,   -55,-32768,-32768,-32768,-32768,   285,   290,   295,
   320,   453,   462,   468,   327,   333,   341,   473,   353,   478,
   483,   362,   368,   396,   488,   506,   513,   401,   406,   413,
   421,   428,  1315,-32768,   427,   184,-32768,-32768,-32768,-32768,
-32768,   484,-32768,   486,   -60,   376,-32768,   -54,   438,-32768,
-32768,   122,  1315,  1315,  1315,  1315,-32768,-32768,-32768,  1315,
  1315,  1315,-32768,  1315,-32768,-32768,  1315,  1315,  1315,-32768,
-32768,-32768,  1315,  1315,  1315,  1315,  1315,-32768,-32768,-32768,
   385,   405,    57,   -63,   179,  1315,  1315,  1315,  1315,-32768,
-32768,-32768,  1315,  1315,  1315,-32768,  1315,-32768,-32768,  1315,
  1315,  1315,-32768,-32768,-32768,  1315,  1315,  1315,  1315,  1315,
-32768,-32768,   490,-32768,-32768,-32768,   466,-32768,   520,-32768,
  1064,  1080,  1090,  1100,   434,  1108,  1113,  1118,  1123,  1128,
  1146,  1157,  1163,  1168,  1173,  1179,   460,   480,   507,-32768,
  1315,  1315,   521,   528,   534,   547,   442,   553,   562,   588,
   593,   598,   606,   613,   621,   628,   634,   639,-32768,   446,
-32768,-32768,-32768,-32768,-32768,  1315,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   104,
   902,   909,-32768,-32768,-32768,-32768,  1315,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1189,   508,
-32768,-32768,  1315,-32768,  1315,   647,-32768,   535,  1199,  1227,
-32768,-32768,-32768,-32768,   585,   620,-32768
};

static const short yypgoto[] = {    26,
-32768,-32768,-32768,  -300,-32768,-32768,   330,-32768,   238,-32768,
-32768,   235,   326,-32768,-32768,-32768,-32768,   624,   557,-32768,
   537,-32768,   244,    -1,     1,   445,-32768,     2,     6,     8,
  1373,-32768,-32768,   -40,-32768,   299,   416,   273,-32768,   265,
-32768,-32768,     5,-32768,  -181,   370,    10,  -229
};


#define	YYLAST		1530


static const short yytable[] = {   143,
   302,   391,   284,    71,    30,    72,    73,     1,     2,    81,
    74,   373,    75,   -30,    80,    88,   393,   285,    34,     3,
     4,   394,    30,   131,   132,   555,   395,    15,   229,   230,
    35,    99,   396,     5,    16,    17,     6,     7,     8,     9,
    10,    11,    12,    87,    13,    14,   400,   481,   197,    82,
   193,   401,    31,   194,   147,    83,   402,   378,   379,   380,
   381,   404,   243,   244,   245,   246,   247,    68,    71,    84,
    72,    73,   245,   246,   247,    74,   457,    75,   287,    80,
    85,   288,   184,   173,   289,   174,   479,    15,   480,    86,
    89,   460,   290,   102,    16,    17,   101,   103,   237,   238,
   240,   104,   105,   303,   377,   175,   201,   243,   244,   245,
   246,   247,   243,   244,   245,   246,   247,   243,   244,   245,
   246,   247,   243,   244,   245,   246,   247,   176,   243,   244,
   245,   246,   247,   540,   185,   541,   183,   279,   280,   281,
   282,   283,   243,   244,   245,   246,   247,   243,   244,   245,
   246,   247,   243,   244,   245,   246,   247,   243,   244,   245,
   246,   247,   407,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   408,   331,
   188,   196,   333,   334,   409,   189,   191,    99,   195,   197,
   202,   297,   342,   343,   344,   345,   346,   232,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
   370,   371,   372,   413,   178,   179,   180,   181,   414,   182,
     1,     2,   204,   415,   376,   205,   206,   207,   416,   208,
   209,   210,     3,     4,   211,   212,   213,   214,   243,   244,
   245,   246,   247,   235,   215,   249,     5,   216,   217,     6,
     7,     8,     9,    10,    11,    12,   218,    13,    14,   219,
   220,   417,   221,   222,   243,   244,   245,   246,   247,   482,
   243,   244,   245,   246,   247,   236,   297,   223,   424,   425,
   224,   225,   226,   201,   243,   244,   245,   246,   247,   243,
   244,   245,   246,   247,   426,   227,   228,   233,   234,   427,
    15,   241,   248,   174,   428,   250,   251,    16,    17,   243,
   244,   245,   246,   247,   243,   244,   245,   246,   247,   243,
   244,   245,   246,   247,   243,   244,   245,   246,   247,   429,
   252,   253,   461,   462,   463,   464,   433,   254,   255,   465,
   466,   467,   434,   468,   256,   257,   469,   470,   471,   258,
   435,   259,   472,   473,   474,   475,   476,   243,   244,   245,
   246,   247,   437,   260,   261,   483,   484,   485,   486,   297,
   262,   440,   487,   488,   489,   263,   490,   441,   264,   491,
   492,   493,   265,   266,   267,   494,   495,   496,   497,   498,
   243,   244,   245,   246,   247,   243,   244,   245,   246,   247,
   243,   244,   245,   246,   247,   442,   268,   269,   270,   271,
   446,   272,   273,   277,   278,   447,   285,   286,   291,   292,
   521,   522,   448,   298,   299,   243,   244,   245,   246,   247,
   449,   304,   243,   244,   245,   246,   247,   450,   243,   244,
   245,   246,   247,   506,   300,   539,   243,   244,   245,   246,
   247,   527,   332,   335,   336,   337,   341,   242,   243,   244,
   245,   246,   247,   430,   375,   374,   546,   243,   244,   245,
   246,   247,   431,   243,   244,   245,   246,   247,   432,   385,
   347,   383,   549,   436,   550,   384,   388,   389,   438,   392,
   418,   230,   452,   439,   423,   453,   459,   477,   443,     5,
   499,   243,   244,   245,   246,   247,   243,   244,   245,   246,
   247,   243,   244,   245,   246,   247,   444,   478,   243,   244,
   245,   246,   247,   445,   500,   518,   243,   244,   245,   246,
   247,   523,   501,   243,   244,   245,   246,   247,   524,   243,
   244,   245,   246,   247,   525,   519,   552,   243,   244,   245,
   246,   247,   243,   244,   245,   246,   247,   526,   243,   244,
   245,   246,   247,   528,   556,   520,   548,   243,   244,   245,
   246,   247,   529,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   530,   557,
   456,   382,   455,   531,   387,    33,   177,   454,   532,   192,
   420,   243,   244,   245,   246,   247,   533,   293,   243,   244,
   245,   246,   247,   534,   330,   451,   243,   244,   245,   246,
   247,   535,   458,   243,   244,   245,   246,   247,   536,   243,
   244,   245,   246,   247,   537,     0,   386,     0,     0,   538,
     0,     0,   243,   244,   245,   246,   247,   551,   243,   244,
   245,   246,   247,     0,     0,     0,     0,   243,   244,   245,
   246,   247,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   338,     0,     0,
     0,     0,     0,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,     0,     0,
     0,   243,   244,   245,   246,   247,     0,     0,   243,   244,
   245,   246,   247,     0,     0,     0,   243,   244,   245,   246,
   247,     0,     0,   243,   244,   245,   246,   247,     0,   243,
   244,   245,   246,   247,   243,   244,   245,   246,   247,     0,
     0,     0,   243,   244,   245,   246,   247,    90,     0,     0,
     0,     0,    38,     0,     1,     2,    39,     0,     0,     0,
   -30,     0,     0,     0,     0,   339,     3,     4,   340,     0,
    40,   243,   244,   245,   246,   247,     0,    41,     0,     0,
     5,     0,     0,     6,     7,     8,     9,    10,    11,    12,
   -45,    13,    14,   -45,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,     0,
    90,     0,     0,     0,     0,    38,     0,     1,     2,    39,
     0,     0,    67,   -30,    15,     0,     0,     0,     0,     3,
     4,    16,    17,    40,     0,    68,     0,     0,     0,     0,
    41,     0,     0,     5,     0,     0,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,   -45,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,     0,    37,     0,     0,     0,     0,    38,     0,
     0,     0,    39,   542,     0,    67,     0,    15,     0,     0,
   544,     0,     0,     0,    16,    17,    40,     0,    68,     0,
     0,     0,     0,    41,     0,     0,     0,   -36,     0,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,     0,    90,     0,     0,     0,
     0,    38,   397,     0,     0,    39,     0,   398,    67,     0,
    15,     0,   399,   543,     0,     0,     0,    16,    17,    40,
   545,    68,   403,     0,     0,     0,    41,   243,   244,   245,
   246,   247,   405,     0,   243,   244,   245,   246,   247,   -45,
   406,     0,   -45,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,   410,     0,
     0,     0,     0,   411,     0,     0,     0,     0,   412,     0,
     0,    67,     0,    15,   421,     0,     0,     0,     0,   422,
    16,    17,     0,     0,    68,   502,   243,   244,   245,   246,
   247,   243,   244,   245,   246,   247,   243,   244,   245,   246,
   247,   503,     0,     0,     0,     0,   243,   244,   245,   246,
   247,   504,     0,     0,     0,     0,   243,   244,   245,   246,
   247,   505,     0,     0,   243,   244,   245,   246,   247,   507,
     0,     0,     0,     0,   508,     0,     0,     0,     0,   509,
     0,     0,     0,     0,   510,     0,     0,     0,     0,   511,
     0,     0,   243,   244,   245,   246,   247,   243,   244,   245,
   246,   247,   243,   244,   245,   246,   247,   512,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   513,   243,
   244,   245,   246,   247,   514,     0,     0,     0,     0,   515,
     0,     0,     0,     0,   516,   243,   244,   245,   246,   247,
   517,     0,     0,     0,     0,   243,   244,   245,   246,   247,
   547,     0,     0,     0,     0,   243,   244,   245,   246,   247,
   553,     0,     0,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   554,     0,
     0,     0,     0,     0,   419,     0,     0,     0,     0,     0,
     0,   243,   244,   245,   246,   247,     0,     0,     0,     0,
     0,     0,   243,   244,   245,   246,   247,     0,   243,   244,
   245,   246,   247,   243,   244,   245,   246,   247,   243,   244,
   245,   246,   247,     0,   243,   244,   245,   246,   247,     0,
     0,     0,     0,     0,   243,   244,   245,   246,   247,     0,
     0,     0,     0,     0,   243,   244,   245,   246,   247,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   243,   244,   245,   246,   247,   243,   244,   245,
   246,   247,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,     0,     0,     0,
     0,     0,   131,   132,     0,     0,     0,     0,     0,     0,
   133,   134,     0,     0,     0,     0,     0,     0,     0,   135,
   136,     0,   137,   138,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
   139,   140,     0,     0,     0,   141,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,     0,     0,     0,     0,     0,   131,   239,     0,     0,
     0,     0,     0,     0,   133,   134,     0,     0,     0,     0,
     0,     0,     0,   135,   136,     0,   137,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   139,   140,     0,     0,     0,   141
};

static const short yycheck[] = {    40,
    30,   302,   184,     5,     0,     5,     5,     8,     9,    80,
     5,    30,     5,    14,     5,    31,    30,   100,    10,    20,
    21,    30,    18,    78,    79,     0,    30,    88,   131,   132,
    22,    27,    30,    34,    95,    96,    37,    38,    39,    40,
    41,    42,    43,    18,    45,    46,    30,   111,   131,   120,
    44,    30,     7,    47,    86,    86,    30,   287,   288,   289,
   290,    30,   126,   127,   128,   129,   130,    99,    70,    86,
    70,    70,   128,   129,   130,    70,   131,    70,   127,    70,
    86,   130,    78,   131,   133,   133,    30,    88,    32,    86,
    14,   392,   141,    34,    95,    96,    86,    31,   139,   140,
   141,    31,   131,   133,   286,   133,   102,   126,   127,   128,
   129,   130,   126,   127,   128,   129,   130,   126,   127,   128,
   129,   130,   126,   127,   128,   129,   130,    35,   126,   127,
   128,   129,   130,    30,    86,    32,    31,   178,   179,   180,
   181,   182,   126,   127,   128,   129,   130,   126,   127,   128,
   129,   130,   126,   127,   128,   129,   130,   126,   127,   128,
   129,   130,    30,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,    30,   230,
    31,    31,   233,   234,    30,    86,    86,   193,    86,   131,
    79,   197,   243,   244,   245,   246,   247,   133,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,    30,   100,   101,   102,   103,    30,   105,
     8,     9,   131,    30,   285,   131,   131,   131,    30,   131,
   131,   131,    20,    21,   131,   131,   131,   131,   126,   127,
   128,   129,   130,   133,   131,    30,    34,   131,   131,    37,
    38,    39,    40,    41,    42,    43,   131,    45,    46,   131,
   131,    30,   131,   131,   126,   127,   128,   129,   130,   111,
   126,   127,   128,   129,   130,   133,   292,   131,   339,   340,
   131,   131,   131,   299,   126,   127,   128,   129,   130,   126,
   127,   128,   129,   130,    30,   131,   131,   131,   131,    30,
    88,   133,   133,   133,    30,    30,    30,    95,    96,   126,
   127,   128,   129,   130,   126,   127,   128,   129,   130,   126,
   127,   128,   129,   130,   126,   127,   128,   129,   130,    30,
    30,    30,   393,   394,   395,   396,    30,    30,    30,   400,
   401,   402,    30,   404,    30,    30,   407,   408,   409,    30,
    30,    30,   413,   414,   415,   416,   417,   126,   127,   128,
   129,   130,    30,    30,    30,   426,   427,   428,   429,   385,
    30,    30,   433,   434,   435,    30,   437,    30,    30,   440,
   441,   442,    30,    30,    30,   446,   447,   448,   449,   450,
   126,   127,   128,   129,   130,   126,   127,   128,   129,   130,
   126,   127,   128,   129,   130,    30,    30,    30,    30,    30,
    30,    30,    30,    86,    86,    30,   100,    30,   122,   131,
   481,   482,    30,    35,    31,   126,   127,   128,   129,   130,
    30,    32,   126,   127,   128,   129,   130,    30,   126,   127,
   128,   129,   130,    30,    86,   506,   126,   127,   128,   129,
   130,    30,    86,    86,    86,    30,    86,    31,   126,   127,
   128,   129,   130,    31,   133,    32,   527,   126,   127,   128,
   129,   130,    31,   126,   127,   128,   129,   130,    31,    30,
    86,    47,   543,    31,   545,    32,   100,   132,    31,   133,
    32,   132,    86,    31,    79,    32,    79,   133,    31,    34,
    31,   126,   127,   128,   129,   130,   126,   127,   128,   129,
   130,   126,   127,   128,   129,   130,    31,   133,   126,   127,
   128,   129,   130,    31,    79,    86,   126,   127,   128,   129,
   130,    31,    33,   126,   127,   128,   129,   130,    31,   126,
   127,   128,   129,   130,    31,    86,    32,   126,   127,   128,
   129,   130,   126,   127,   128,   129,   130,    31,   126,   127,
   128,   129,   130,    31,     0,    79,    79,   126,   127,   128,
   129,   130,    31,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,    31,     0,
   386,   292,   385,    31,   299,     2,    70,   384,    31,    93,
   332,   126,   127,   128,   129,   130,    31,   193,   126,   127,
   128,   129,   130,    31,   229,   373,   126,   127,   128,   129,
   130,    31,   388,   126,   127,   128,   129,   130,    31,   126,
   127,   128,   129,   130,    31,    -1,   297,    -1,    -1,    31,
    -1,    -1,   126,   127,   128,   129,   130,    31,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    -1,    -1,    -1,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,    -1,    -1,
    -1,   126,   127,   128,   129,   130,    -1,    -1,   126,   127,
   128,   129,   130,    -1,    -1,    -1,   126,   127,   128,   129,
   130,    -1,    -1,   126,   127,   128,   129,   130,    -1,   126,
   127,   128,   129,   130,   126,   127,   128,   129,   130,    -1,
    -1,    -1,   126,   127,   128,   129,   130,     1,    -1,    -1,
    -1,    -1,     6,    -1,     8,     9,    10,    -1,    -1,    -1,
    14,    -1,    -1,    -1,    -1,   120,    20,    21,   123,    -1,
    24,   126,   127,   128,   129,   130,    -1,    31,    -1,    -1,
    34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
     1,    -1,    -1,    -1,    -1,     6,    -1,     8,     9,    10,
    -1,    -1,    86,    14,    88,    -1,    -1,    -1,    -1,    20,
    21,    95,    96,    24,    -1,    99,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    -1,     1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    10,    32,    -1,    86,    -1,    88,    -1,    -1,
    32,    -1,    -1,    -1,    95,    96,    24,    -1,    99,    -1,
    -1,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    37,
    38,    39,    40,    41,    42,    43,    -1,    45,    46,    -1,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    -1,     1,    -1,    -1,    -1,
    -1,     6,    32,    -1,    -1,    10,    -1,    32,    86,    -1,
    88,    -1,    32,   112,    -1,    -1,    -1,    95,    96,    24,
   112,    99,    32,    -1,    -1,    -1,    31,   126,   127,   128,
   129,   130,    32,    -1,   126,   127,   128,   129,   130,    44,
    32,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    32,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    32,    -1,
    -1,    86,    -1,    88,    32,    -1,    -1,    -1,    -1,    32,
    95,    96,    -1,    -1,    99,    32,   126,   127,   128,   129,
   130,   126,   127,   128,   129,   130,   126,   127,   128,   129,
   130,    32,    -1,    -1,    -1,    -1,   126,   127,   128,   129,
   130,    32,    -1,    -1,    -1,    -1,   126,   127,   128,   129,
   130,    32,    -1,    -1,   126,   127,   128,   129,   130,    32,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    32,
    -1,    -1,   126,   127,   128,   129,   130,   126,   127,   128,
   129,   130,   126,   127,   128,   129,   130,    32,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,    32,   126,
   127,   128,   129,   130,    32,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    -1,    -1,    32,   126,   127,   128,   129,   130,
    32,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
    32,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
    32,    -1,    -1,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,    32,    -1,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
    -1,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   126,   127,   128,   129,   130,    -1,   126,   127,
   128,   129,   130,   126,   127,   128,   129,   130,   126,   127,
   128,   129,   130,    -1,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   126,   127,   128,   129,   130,   126,   127,   128,
   129,   130,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
    -1,    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    -1,    98,    99,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
   126,   127,    -1,    -1,    -1,   131,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,   131
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 226 "script.y"
{ 
                                                            yyval.tree = yyvsp[0].tree;
                                                            //
                                                            pCompilerTreeMng->pRoot=yyval.tree;
                                                         ;
    break;}
case 2:
#line 231 "script.y"
{ 
                                                            yyval.tree = yyvsp[-1].tree;
                                                            yyvsp[-1].tree->SetNext( yyvsp[0].tree );
                                                            //
                                                            pCompilerTreeMng->pRoot=yyval.tree;
                                                         ;
    break;}
case 11:
#line 252 "script.y"
{ yyval.par = pParameterMng->CreateParameter( "temp" ); ;
    break;}
case 12:
#line 253 "script.y"
{ yyval.par = pParameterMng->CreateParameter( "const" ); ;
    break;}
case 13:
#line 255 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntToken      , yyvsp[0].par ) ); ;
    break;}
case 14:
#line 256 "script.y"
{ 
                                                            yyval.tree=xnewp( SCompilerTree , ( ntToken      , yyvsp[-2].par ) );
                                                            yyval.tree->pNext=yyvsp[0].tree;
                                                         ;
    break;}
case 15:
#line 260 "script.y"
{ 
                                                            yyval.tree=xnewp( SCompilerTree , ( ntToken      , yyvsp[-3].par ) );
                                                            yyval.tree->aTree[0]=yyvsp[0].tree;
                                                            yyval.tree->pNext=yyvsp[0].tree->pNext;
                                                            yyvsp[0].tree->pNext=0;
                                                         ;
    break;}
case 16:
#line 268 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntReserve    , yyvsp[-3].par , yyvsp[-1].tree ) ); ;
    break;}
case 17:
#line 276 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFunction   , yyvsp[-4].par , yyvsp[-5].tree , yyvsp[-2].tree , yyvsp[0].tree ) ); ;
    break;}
case 18:
#line 278 "script.y"
{ yyval.tree = NULL; ;
    break;}
case 19:
#line 279 "script.y"
{ yyval.tree = yyvsp[0].tree; ;
    break;}
case 20:
#line 283 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntDefVariable, yyvsp[-2].tree , yyvsp[-1].tree , yyvsp[0].tree ) ); ;
    break;}
case 22:
#line 287 "script.y"
{ yyval.tree = yyvsp[-2].tree; yyvsp[-2].tree->SetNext( yyvsp[0].tree ); ;
    break;}
case 23:
#line 291 "script.y"
{ yyval.tree = NULL; ;
    break;}
case 24:
#line 292 "script.y"
{ yyval.tree = yyvsp[0].tree; ;
    break;}
case 25:
#line 296 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntDefVariable, yyvsp[-2].tree , yyvsp[-1].tree , yyvsp[0].tree ) ); ;
    break;}
case 26:
#line 298 "script.y"
{ yyval.tree = 0; ;
    break;}
case 27:
#line 299 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntArray , yyvsp[-1].par ) ); ;
    break;}
case 29:
#line 304 "script.y"
{ yyval.tree = yyvsp[-2].tree; yyvsp[-2].tree->SetNext( yyvsp[0].tree ); ;
    break;}
case 30:
#line 312 "script.y"
{ yyval.tree = 0; ;
    break;}
case 31:
#line 313 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntRadical ) ); ;
    break;}
case 32:
#line 316 "script.y"
{ 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntPlugin     , yyvsp[-4].par , yyvsp[-2].tree , yyvsp[-6].tree ) ); 
                                                            //
                                                            SCRegisterPlugin( yyvsp[-4].par->toString() );
                                                         ;
    break;}
case 33:
#line 322 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntInput      , yyvsp[-1].tree ) ); ;
    break;}
case 34:
#line 324 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOutput     , yyvsp[-1].tree ) ); ;
    break;}
case 35:
#line 327 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVertexShader , yyvsp[-1].tree ) ); ;
    break;}
case 36:
#line 333 "script.y"
{ yyval.tree = NULL; ;
    break;}
case 37:
#line 334 "script.y"
{ yyvsp[-1].tree->SetNext( yyvsp[0].tree ); yyval.tree = yyvsp[-1].tree; ;
    break;}
case 44:
#line 342 "script.y"
{  LastError=PEMissingSemicolonBefore;
                                                            yyerror(0); 
                                                            return 1; ;
    break;}
case 45:
#line 346 "script.y"
{ yyval.tree = NULL; ;
    break;}
case 46:
#line 347 "script.y"
{ yyvsp[-1].tree->SetNext( yyvsp[0].tree ); yyval.tree = yyvsp[-1].tree; ;
    break;}
case 52:
#line 354 "script.y"
{  LastError=PEMissingSemicolonBefore;
                                                            yyerror(0); 
                                                            return 1; ;
    break;}
case 53:
#line 358 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntScope      , yyvsp[-1].tree ) ); ;
    break;}
case 54:
#line 360 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntReturn     , yyvsp[-1].tree ) ); ;
    break;}
case 55:
#line 362 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntEmpty         ) ); ;
    break;}
case 58:
#line 373 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfDef         , yyvsp[0].par ) ); ;
    break;}
case 59:
#line 374 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfnDef        , yyvsp[0].par ) ); ;
    break;}
case 60:
#line 376 "script.y"
{ 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntIncludeSys    , yyvsp[-1].par ) ); 
                                                            ParseInclude( pCompiler->GetInclude( yyval.tree , yyvsp[-1].par->toString() , 1 ) );
                                                         ;
    break;}
case 61:
#line 381 "script.y"
{ 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntInclude       , yyvsp[0].par ) ); 
                                                            ParseInclude( pCompiler->GetInclude( yyval.tree , yyvsp[0].par->toString() ) );
                                                         ;
    break;}
case 62:
#line 386 "script.y"
{  
                                                            yyvsp[-2].tree->aTree[0]=yyvsp[-1].tree; 
                                                            yyval.tree=yyvsp[-2].tree;
                                                         ;
    break;}
case 63:
#line 391 "script.y"
{  
                                                            yyvsp[-4].tree->aTree[0]=yyvsp[-3].tree; 
                                                            yyvsp[-4].tree->aTree[1]=yyvsp[-1].tree;
                                                            yyval.tree=yyvsp[-4].tree;
                                                         ;
    break;}
case 64:
#line 396 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntDefine        , yyvsp[0].par ) ); ;
    break;}
case 65:
#line 397 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntUndefine      , yyvsp[0].par ) ); ;
    break;}
case 66:
#line 398 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOptimization  , pParameterMng->CreateParameter(  0 ) ) ); ;
    break;}
case 67:
#line 399 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOptimization  , pParameterMng->CreateParameter(  1 ) ) ); ;
    break;}
case 68:
#line 400 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOptimization  , pParameterMng->CreateParameter(  2 ) ) ); ;
    break;}
case 69:
#line 401 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOptimization  , pParameterMng->CreateParameter( 10 ) ) ); ;
    break;}
case 70:
#line 408 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmAdd   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 71:
#line 409 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmDp3   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 72:
#line 410 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmDp4   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 73:
#line 411 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmDst   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 74:
#line 412 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmExpp  , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 75:
#line 413 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmLit   , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 76:
#line 414 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmLogp  , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 77:
#line 416 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmMad   , yyvsp[-7].tree , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 78:
#line 417 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmMax   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 79:
#line 418 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmMin   , yyvsp[-5].tree , yyvsp[-3].tree ) ); ;
    break;}
case 80:
#line 419 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmMov   , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 81:
#line 420 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmMul   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 82:
#line 421 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmRcp   , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 83:
#line 422 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmRsq   , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 84:
#line 423 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmSge   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 85:
#line 424 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmSlt   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 86:
#line 425 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmSub   , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 87:
#line 427 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmExp   , yyvsp[-3].tree , yyvsp[-1].tree  ) ); ;
    break;}
case 88:
#line 428 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmFrc   , yyvsp[-3].tree , yyvsp[-1].tree  ) ); ;
    break;}
case 89:
#line 429 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmLog   , yyvsp[-3].tree , yyvsp[-1].tree  ) ); ;
    break;}
case 90:
#line 430 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmM3x2  , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 91:
#line 431 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmM3x3  , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 92:
#line 432 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmM3x4  , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 93:
#line 433 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmM4x3  , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 94:
#line 434 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAsmM4x4  , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 95:
#line 440 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExpression , yyvsp[-1].tree ) ); ;
    break;}
case 96:
#line 444 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFuncCall   , yyvsp[-3].par, yyvsp[-1].tree ) ); ;
    break;}
case 97:
#line 446 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntLParam     , yyvsp[0].par ) ); ;
    break;}
case 98:
#line 447 "script.y"
{ 
                                                            SCompilerTree *v = xnewp( SCompilerTree   , ( ntModifier   , yyvsp[0].par ) ); 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntLParam    , yyvsp[-2].par , 0 , 0 , 0 , v ) );
                                                         ;
    break;}
case 99:
#line 451 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOutputLParam  , yyvsp[0].par ) ); ;
    break;}
case 100:
#line 452 "script.y"
{ 
                                                            SCompilerTree *v = xnewp( SCompilerTree   , ( ntModifier   , yyvsp[0].par ) ); 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntOutputLParam  , yyvsp[-2].par , 0 , 0 , 0 , v ) ); 
                                                         ;
    break;}
case 101:
#line 457 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntAssign     , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 102:
#line 458 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntSetAdd     , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 103:
#line 459 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntSetSub     , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 104:
#line 460 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntSetMul     , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 105:
#line 462 "script.y"
{ 
                                                            SCompilerTree *v=xnewp( SCompilerTree , ( ntExprRcp    , yyvsp[0].tree ) );
                                                            yyval.tree = xnewp( SCompilerTree , ( ntExprMul    , yyvsp[-2].tree, v ) );
                                                         ;
    break;}
case 106:
#line 469 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprAdd    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 107:
#line 470 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprDp3    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 108:
#line 471 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprDp4    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 109:
#line 472 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprDst    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 110:
#line 473 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprExpp   ,yyvsp[-1].tree      ) ); ;
    break;}
case 111:
#line 474 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprLit    ,yyvsp[-1].tree      ) ); ;
    break;}
case 112:
#line 475 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprLogp   ,yyvsp[-1].tree      ) ); ;
    break;}
case 113:
#line 476 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMad    ,yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 114:
#line 477 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMax    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 115:
#line 478 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMin    ,yyvsp[-3].tree      ) ); ;
    break;}
case 116:
#line 479 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMov    ,yyvsp[-1].tree      ) ); ;
    break;}
case 117:
#line 480 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMul    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 118:
#line 481 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprRcp    ,yyvsp[-1].tree      ) ); ;
    break;}
case 119:
#line 482 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprRsq    ,yyvsp[-1].tree      ) ); ;
    break;}
case 120:
#line 483 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprSge    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 121:
#line 484 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprSlt    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 122:
#line 485 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprSub    ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 123:
#line 487 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprExp    ,yyvsp[-1].tree  ) ); ;
    break;}
case 124:
#line 488 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprFrc    ,yyvsp[-1].tree  ) ); ;
    break;}
case 125:
#line 489 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprLog    ,yyvsp[-1].tree  ) ); ;
    break;}
case 126:
#line 490 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprM3x2   ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 127:
#line 491 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprM3x3   ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 128:
#line 492 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprM3x4   ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 129:
#line 493 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprM4x3   ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 130:
#line 494 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprM4x4   ,yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 131:
#line 498 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMad    , yyvsp[-4].tree, yyvsp[-2].tree , yyvsp[0].tree ) ); ;
    break;}
case 132:
#line 499 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMad    , yyvsp[-2].tree, yyvsp[0].tree , yyvsp[-4].tree ) ); ;
    break;}
case 135:
#line 506 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVectorModifier    , yyvsp[0].par , yyvsp[-2].tree ) ); ;
    break;}
case 136:
#line 509 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprAdd    , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 137:
#line 510 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprSub    , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 138:
#line 511 "script.y"
{ 
                                                            SCompilerTree *v=xnewp( SCompilerTree , ( ntExprRcp    , yyvsp[0].tree ) );
                                                            yyval.tree = xnewp( SCompilerTree , ( ntExprMul    , yyvsp[-2].tree, v ) );
                                                         ;
    break;}
case 139:
#line 515 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprMul    , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 140:
#line 516 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntExprDp3    , yyvsp[-2].tree, yyvsp[0].tree ) ); ;
    break;}
case 141:
#line 521 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfGeElse   , yyvsp[-7].tree , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 142:
#line 523 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfLsElse   , yyvsp[-7].tree , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 143:
#line 525 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfGe       , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 144:
#line 526 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIfLs       , yyvsp[-5].tree , yyvsp[-3].tree , yyvsp[-1].tree ) ); ;
    break;}
case 145:
#line 529 "script.y"
{
                                                            yyval.tree = yyvsp[-2].tree;
                                                            yyval.tree->aTree[3]=xnewp( SCompilerTree   , ( ntModifier   , yyvsp[0].par ) ); 
                                                         ;
    break;}
case 146:
#line 535 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFuncCallRet, yyvsp[-3].par, yyvsp[-1].tree ) ); ;
    break;}
case 147:
#line 537 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVariable   , yyvsp[-1].par, 0 , 0 , yyvsp[0].tree  ) ); ;
    break;}
case 148:
#line 541 "script.y"
{ 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntClassVar , yyvsp[-1].par , 0 , 0 , yyvsp[0].tree ) ); 
                                                            yyval.tree->aTree[0] = xnewp( SCompilerTree , ( ntClass , yyvsp[-3].par ) ); 
                                                         ;
    break;}
case 149:
#line 547 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntInputVariable , yyvsp[0].par ) ); ;
    break;}
case 150:
#line 548 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntOutputLParam  , yyvsp[0].par ) ); ;
    break;}
case 152:
#line 553 "script.y"
{ yyval.tree = yyvsp[-1].tree; ;
    break;}
case 153:
#line 554 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFloatModifier , yyvsp[-1].tree      ) ); ;
    break;}
case 154:
#line 555 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFloatModifier , yyvsp[0].par , yyvsp[-3].tree ) ); ;
    break;}
case 155:
#line 556 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVectorModifier, yyvsp[0].par , yyvsp[-3].tree ) ); ;
    break;}
case 156:
#line 557 "script.y"
{ yyval.tree = yyvsp[0].tree; ;
    break;}
case 157:
#line 558 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntNeg        , yyvsp[0].tree ) ); ;
    break;}
case 158:
#line 561 "script.y"
{ yyval.tree=0;;
    break;}
case 159:
#line 562 "script.y"
{
                                                            yyval.tree = xnewp( SCompilerTree , ( ntArrayAccess   , yyvsp[-1].tree ) ); 
                                                         ;
    break;}
case 160:
#line 568 "script.y"
{ yyval.tree = NULL; ;
    break;}
case 163:
#line 573 "script.y"
{ yyvsp[-2].tree->SetNext( yyvsp[0].tree ); yyval.tree = yyvsp[-2].tree; ;
    break;}
case 164:
#line 580 "script.y"
{  
                                                            SCompilerTree *p1=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-3].par ) );
                                                            SCompilerTree *p2=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-1].par ) );
                                                            //
                                                            yyval.tree = xnewp( SCompilerTree , ( ntVectorConst   , p1 , p2 ) ); 
                                                         ;
    break;}
case 165:
#line 587 "script.y"
{  
                                                            SCompilerTree *p1=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-5].par ) );
                                                            SCompilerTree *p2=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-3].par ) );
                                                            SCompilerTree *p3=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-1].par ) );
                                                            //
                                                            yyval.tree = xnewp( SCompilerTree , ( ntVectorConst   , p1 , p2 , p3 ) ); 
                                                         ;
    break;}
case 166:
#line 595 "script.y"
{  
                                                            SCompilerTree *p1=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-7].par ) );
                                                            SCompilerTree *p2=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-5].par ) );
                                                            SCompilerTree *p3=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-3].par ) );
                                                            SCompilerTree *p4=xnewp( SCompilerTree , ( ntFloatConst , yyvsp[-1].par ) );
                                                            //
                                                            yyval.tree = xnewp( SCompilerTree , ( ntVectorConst   , p1 , p2 , p3 , p4 ) ); 
                                                         ;
    break;}
case 167:
#line 605 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntIntConst      , yyvsp[0].par  ) ); ;
    break;}
case 168:
#line 606 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntFloatConst    , yyvsp[0].par  ) ); ;
    break;}
case 170:
#line 615 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntStorage       , pParameterMng->CreateParameter("register") ) ); ;
    break;}
case 171:
#line 616 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntStorage       , pParameterMng->CreateParameter("const") ) ); ;
    break;}
case 172:
#line 618 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntType          , pParameterMng->CreateParameter("void") ) ); ;
    break;}
case 173:
#line 619 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntType          , pParameterMng->CreateParameter("float") ) ); ;
    break;}
case 174:
#line 620 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntType          , pParameterMng->CreateParameter("vector") ) ); ;
    break;}
case 176:
#line 624 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVariable      , yyvsp[0].par ) ); ;
    break;}
case 177:
#line 625 "script.y"
{ 
                                                            yyval.tree = xnewp( SCompilerTree , ( ntVariable      , yyvsp[-2].par ) ); 
                                                            yyval.tree->aTree[0] = xnewp( SCompilerTree , ( ntAssign  , yyvsp[-2].par , 0 , yyvsp[0].tree ) ); 
                                                            yyval.tree->aTree[0]->aTree[0] = xnewp( SCompilerTree , ( ntLParam  , yyvsp[-2].par ) ); 
                                                         ;
    break;}
case 179:
#line 632 "script.y"
{ yyval.tree=yyvsp[-2].tree; yyvsp[-2].tree->SetNext( yyvsp[0].tree ); ;
    break;}
case 180:
#line 634 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVariable      , yyvsp[0].par ) ); ;
    break;}
case 181:
#line 635 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntVariable      , yyvsp[-2].par , yyvsp[0].tree ) ); ;
    break;}
case 183:
#line 638 "script.y"
{ yyval.tree=yyvsp[-2].tree; yyvsp[-2].tree->SetNext( yyvsp[0].tree ); ;
    break;}
case 184:
#line 640 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntDefVariable   , yyvsp[-1].tree , yyvsp[0].tree ) ); ;
    break;}
case 185:
#line 641 "script.y"
{ yyval.tree = xnewp( SCompilerTree , ( ntDefVariable   , yyvsp[-1].tree , yyvsp[0].tree , yyvsp[-2].tree ) ); ;
    break;}
case 186:
#line 648 "script.y"
{ yyval.par = yyvsp[0].par; ;
    break;}
case 187:
#line 649 "script.y"
{ 
                                                            TString s;
                                                            s=TString( yyvsp[-2].par->toString() ) << "." << yyvsp[0].par->toString();
                                                            xdelete( yyvsp[0].par );
                                                            yyval.par->Set( tochar( s ) );
                                                         ;
    break;}
case 188:
#line 655 "script.y"
{ 
                                                            TString s;
                                                            s=TString( yyvsp[-2].par->toString() ) << "/" << yyvsp[0].par->toString();
                                                            xdelete( yyvsp[0].par );
                                                            yyval.par->Set( tochar( s ) );
                                                         ;
    break;}
case 189:
#line 661 "script.y"
{ 
                                                            TString s;
                                                            s=TString( yyvsp[-2].par->toString() ) << "\\" << yyvsp[0].par->toString();
                                                            xdelete( yyvsp[0].par );
                                                            yyval.par->Set( tochar( s ) );
                                                         ;
    break;}
case 190:
#line 667 "script.y"
{ 
                                                            TString s;
                                                            s=TString( yyvsp[-2].par->toString() ) << "-" << yyvsp[0].par->toString();
                                                            xdelete( yyvsp[0].par );
                                                            yyval.par->Set( tochar( s ) );
                                                         ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 676 "script.y"

