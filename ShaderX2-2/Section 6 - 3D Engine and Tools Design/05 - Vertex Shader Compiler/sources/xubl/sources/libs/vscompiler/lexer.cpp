/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
static yyconst short int yy_accept[343] =
    {   0,
        0,    0,  123,  121,  116,  117,  117,  120,  121,  121,
      121,  121,  121,  121,  121,  104,  121,  112,  112,  121,
      121,  121,  115,  121,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  121,   95,    0,    0,    0,    0,    0,   86,   93,
       88,   87,  101,   83,  102,  112,   84,    0,  119,  118,
       85,    0,    0,    0,   98,   96,   94,   97,   99,  115,
      115,   90,  106,  115,  115,  115,  108,  115,  115,  115,
      115,  115,   18,  115,  115,  115,  115,  115,  115,  115,
       21,  115,    5,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  107,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      109,  115,  115,  115,  115,   89,  100,   79,   80,   81,
       82,    0,    0,    0,    0,    0,    0,  103,  118,  110,
      111,  113,  114,   91,   92,   45,  115,  115,  115,  115,
      115,  115,  115,   30,  115,   46,   47,   48,  115,   62,
      115,   20,   63,  115,   29,  115,   36,   50,   64,  115,
      115,  115,   52,   53,   54,   55,   56,  115,    6,  115,
      115,  115,  115,  115,   57,  115,  115,  115,   58,   59,
      115,   60,  115,  115,   61,  115,  115,  115,   26,  115,

      115,  115,  115,  115,   72,    0,    0,    0,    0,    0,
        0,  105,  115,   33,   10,  115,   32,  115,  115,  115,
      115,   19,   49,  115,  115,  115,   51,   37,   65,   66,
       67,   68,   69,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,    9,  115,  115,
      115,   31,  115,   35,    0,   78,    0,    0,    0,    0,
        0,    2,   15,   41,   11,  115,  115,   38,  115,    3,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       34,  115,  115,  115,   25,  115,  115,   28,    0,   77,
       75,    0,    0,   74,  115,  115,   22,  115,    4,    1,

      115,  115,   44,  115,  115,  115,   24,   13,   39,   27,
       40,  115,   71,   76,    0,    0,  115,   17,  115,   42,
      115,   12,  115,    8,  115,   70,    0,   16,  115,  115,
       14,  115,   73,  115,   43,  115,  115,  115,   23,  115,
        7,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    1,    7,    1,    8,    9,    1,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   20,   20,   20,   20,    1,    1,   21,
       22,   23,    1,    1,   24,   24,   24,   24,   24,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   26,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        1,    1,    1,   27,   25,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   25,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    1,   53,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    5,    5,    5,    5,    5,    5,
        1,    3,    1,    6,    7,    7,    1,    6,    8,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        7,    7,    1
    } ;

static yyconst short int yy_base[348] =
    {   0,
        0,    0,  588,  920,  920,  920,  920,  920,  542,   28,
      538,   46,  495,   45,   49,  489,   48,   44,   61,   44,
      463,   60,   69,  460,   80,   97,  134,   77,   82,   86,
       96,  119,  158,   57,   59,   87,  195,  207,  129,  244,
      130,   70,  920,  127,  432,   53,  106,  401,  920,  920,
      920,  920,  920,  920,  920,  172,  920,  427,  920,    0,
      920,  201,  141,    0,  410,  920,  920,  920,  405,  115,
      149,  920,  376,  152,  192,  182,  194,  193,  221,  222,
      157,  237,  204,  250,  231,  235,  245,  249,  227,  253,
      240,  261,  265,  262,  280,  248,  271,  279,  288,  289,

      297,  298,  299,  300,  316,  317,  326,  322,  275,  330,
      319,  333,  328,  334,  274,  353,  347,  348,  283,  342,
       31,  358,  359,  364,  345,  920,  920,  920,  920,  920,
      920,  372,  345,  328,  164,  325,  307,  362,    0,  401,
      920,  163,    0,  920,  920,  350,  378,  391,  392,  395,
      382,  386,  403,  394,  400,  406,  408,  409,  423,  414,
      433,  418,  419,  427,  422,  428,  432,  436,  444,  447,
      475,  471,  452,  453,  455,  456,  457,  467,  470,  476,
      465,  479,  490,  488,  485,  499,  501,  493,  487,  498,
      502,  503,  511,  512,  507,  515,  523,  527,  525,  526,

      529,  548,  543,  551,  238,  225,  216,  215,  215,  193,
      198,  534,  552,  546,  547,  565,  557,  560,  566,  570,
      571,  569,  575,  579,  580,  583,  584,  588,  589,  592,
      593,  594,  597,  608,  603,  613,  614,  619,  617,  625,
      622,  627,  628,  631,  644,  641,  653,  640,  645,  649,
      654,  655,  669,  658,  167,  920,  173,  165,  152,  135,
      135,  659,  663,  664,  667,  672,  681,  673,  682,  678,
      691,  690,  699,  694,  700,  716,  703,  711,  705,  708,
      714,  731,  729,  733,  720,  725,  728,  730,  126,  920,
      920,  112,   76,   69,  739,  741,  744,  745,  749,  750,

      765,  759,  755,  760,  770,  775,  764,  769,  773,  774,
      778,  783,  920,  920,   70,   50,  791,  786,  799,  788,
      801,  796,  797,  800,  811,  920,   37,  805,  809,  823,
      813,  831,  920,  833,  814,  832,  828,  836,  827,  837,
      841,  920,  890,  892,  897,  906,  911
    } ;

static yyconst short int yy_def[348] =
    {   0,
      342,    1,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  343,  342,  342,  344,  342,  342,
      342,  342,  345,  342,  345,  345,  345,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  345,   26,   26,  345,
       26,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  346,
      342,  342,  342,  347,  342,  342,  342,  342,  342,   26,
       26,  342,   25,   26,   26,   26,   27,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   37,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  346,  342,
      342,  342,  347,  342,  342,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  342,  342,  342,  342,  342,  342,
      342,  342,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  342,  342,  342,  342,  342,  342,
      342,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  342,  342,
      342,  342,  342,  342,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  342,  342,  342,  342,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  342,  342,   26,   26,   26,
       26,   26,  342,   26,   26,   26,   26,   26,   26,   26,
       26,    0,  342,  342,  342,  342,  342
    } ;

static yyconst short int yy_nxt[974] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   19,   19,   19,
       20,   21,   22,   23,   23,   23,   24,   25,   26,   27,
       28,   29,   30,   23,   23,   31,   23,   32,   33,   34,
       35,   36,   23,   37,   38,   39,   23,   40,   41,   23,
       23,   23,   42,   44,   50,   53,   62,   59,   45,   46,
       55,   60,   71,   47,   65,   66,   54,   51,  333,   61,
       57,   71,   63,   62,   48,   56,   56,   56,   56,   56,
       56,   68,   69,   70,   70,   70,   70,   70,   70,  327,
      133,  126,  134,   64,   73,   73,   73,   73,   73,   73,

       71,  326,   71,  102,  316,  103,  315,   71,   82,   71,
       74,   70,   70,   70,   70,   70,   70,   83,   84,   86,
       71,   85,  127,   88,  104,   71,   89,   71,   91,   90,
      105,   87,   71,  106,   92,   93,   71,   71,  135,   71,
       75,  128,  129,  130,  314,  136,   71,   76,   77,   77,
       77,   77,   77,   77,   94,  142,  142,  313,   71,   95,
      118,   78,   71,  119,  124,   71,  131,  294,   79,   71,
      125,   80,  120,   71,   81,   96,   97,  142,  142,   71,
       71,  293,  146,  292,   62,   98,   56,   56,   56,   56,
       56,   56,   71,   99,  208,   71,  153,  291,  100,   71,

       71,   71,   71,  209,  101,  290,  289,   71,   71,  107,
      107,  107,  107,  107,  107,  140,  140,  140,  140,  140,
      140,   71,  108,  147,  109,   71,  110,  148,   71,  261,
      260,   71,   71,  141,   71,   71,   71,  149,  150,  111,
      112,  113,   71,   71,  114,  259,  258,   71,  151,  152,
       71,  257,  115,  116,   71,  117,  256,   71,  121,  121,
      121,  121,  121,  121,   71,   71,  154,  156,  157,  155,
      162,   71,   71,  255,   71,  122,  158,   71,   71,  159,
       71,   71,  163,   71,  123,   71,  160,   71,   71,  161,
       71,   71,   71,   71,  165,   71,   71,  171,   71,   71,

       71,  193,  164,   71,   71,   71,  166,  168,   71,  173,
      167,   71,   71,  169,   71,   71,  185,  194,   71,  170,
      172,   71,   71,   71,   71,   71,  198,  175,  174,   71,
       71,   71,   71,   71,  177,  178,  176,  211,   71,   71,
       71,   71,   71,   71,  179,  183,  180,   71,   71,   71,
       71,  181,  184,   71,  210,   71,  182,   71,  207,   71,
       71,  189,   71,  186,  190,   71,   71,   71,  191,   71,
       71,   71,   71,   71,  187,  188,   71,   71,   71,  192,
       71,  195,  196,   71,   71,   71,  197,  200,  204,  206,
       71,   71,  199,   71,  202,   71,   71,   71,   71,  203,

       71,  201,   71,   71,  205,  213,   71,   71,   71,   71,
      212,  212,  212,  212,   71,  140,  140,  140,  140,  140,
      140,   71,  214,  215,  216,  217,  145,  221,   71,   71,
      218,  144,   71,  141,   71,   71,   71,   71,   71,  138,
      137,   71,   71,   71,   71,   71,   71,  219,  220,   71,
       71,   71,   71,   71,  222,  223,   71,   71,   71,   71,
      224,   71,   71,  132,   71,   71,   71,  225,   71,   71,
       71,   71,   71,   71,  226,   71,   71,   71,   71,   71,
      228,   72,   71,   71,   67,  227,   71,   71,  232,  233,
       71,  229,  230,  231,   71,   71,   71,   71,   71,   71,

       71,   58,   71,   71,  234,   71,   71,   71,   71,  236,
       71,  235,  237,   71,   71,   71,   52,   71,   71,   71,
       71,   71,   71,  240,  238,   71,   71,  239,   71,   71,
       71,   71,  242,   71,  241,   71,   71,   71,   71,  243,
       71,   71,   71,   71,   71,  244,   71,  246,   71,   71,
       71,   71,   71,   71,   71,   71,  245,   71,   71,   49,
      247,   71,   71,   43,  248,   71,   71,  249,   71,   71,
       71,  250,   71,   71,  251,   71,   71,   71,  252,   71,
      253,  254,  212,  212,  212,  212,   71,  342,  262,   71,
       71,   71,  342,   71,   71,   71,   71,   71,   71,  263,

       71,   71,   71,   71,  264,  266,  342,   71,   71,   71,
       71,  265,   71,   71,   71,   71,   71,  267,   71,   71,
       71,   71,   71,  269,  268,   71,   71,   71,  270,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  274,   71,   71,   71,  271,   71,   71,  273,  272,
      275,   71,  276,   71,  277,  342,   71,   71,   71,  342,
       71,  342,   71,   71,   71,   71,  278,   71,   71,   71,
      279,  280,   71,  342,   71,   71,  281,   71,   71,  282,
      283,   71,  284,   71,   71,  287,  342,   71,   71,  286,
       71,   71,   71,  285,   71,   71,   71,   71,   71,   71,

      288,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  295,   71,   71,   71,   71,   71,   71,  296,   71,
      342,   71,   71,   71,   71,   71,  298,  297,   71,  302,
      304,   71,   71,   71,   71,  299,  342,   71,  300,  301,
       71,   71,   71,   71,   71,  303,   71,  307,   71,   71,
       71,   71,  306,   71,   71,   71,  305,   71,   71,   71,
      308,   71,  309,   71,   71,  342,   71,  310,  311,  342,
       71,   71,   71,   71,   71,   71,   71,  312,   71,   71,
       71,   71,   71,   71,   71,  317,  318,   71,   71,   71,
      319,   71,   71,   71,   71,   71,  320,  322,   71,   71,

       71,  323,   71,   71,  321,   71,  324,   71,   71,   71,
       71,  342,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  328,   71,   71,   71,   71,  325,   71,   71,
      329,   71,  330,   71,   71,  342,   71,  342,   71,   71,
      331,   71,   71,   71,   71,  332,   71,   71,   71,   71,
       71,   71,  334,  335,   71,   71,   71,   71,  336,   71,
      337,   71,  338,   71,   71,  339,   71,  340,  342,  342,
       71,   71,  342,   71,   71,   71,   71,   71,   71,   71,
      341,   71,   71,   71,   71,  342,   71,   71,  342,  342,
      342,   71,   56,  342,   56,   56,   56,  342,  342,   56,

       56,   71,   71,   71,   71,   71,  139,  342,  139,  139,
      139,  139,  139,  139,  139,  143,  143,  342,  143,    3,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342
    } ;

static yyconst short int yy_chk[974] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   12,   14,   18,   17,   10,   10,
       15,   17,  121,   10,   20,   20,   14,   12,  327,   17,
       15,  121,   18,   19,   10,   19,   19,   19,   19,   19,
       19,   22,   22,   23,   23,   23,   23,   23,   23,  316,
       46,   42,   46,   18,   25,   25,   25,   25,   25,   25,

       34,  315,   35,   34,  294,   35,  293,   34,   28,   35,
       25,   26,   26,   26,   26,   26,   26,   28,   28,   29,
       28,   28,   42,   30,   36,   29,   30,   28,   31,   30,
       36,   29,   29,   36,   31,   31,   30,   36,   47,   31,
       26,   44,   44,   44,  292,   47,   31,   26,   27,   27,
       27,   27,   27,   27,   32,   63,   63,  289,   70,   32,
       39,   27,   32,   39,   41,   70,   44,  261,   27,   32,
       41,   27,   39,   41,   27,   33,   33,  142,  142,   39,
       41,  260,   74,  259,   56,   33,   56,   56,   56,   56,
       56,   56,   71,   33,  135,   74,   81,  258,   33,   71,

       81,   33,   74,  135,   33,  257,  255,   81,   33,   37,
       37,   37,   37,   37,   37,   62,   62,   62,   62,   62,
       62,   77,   37,   75,   37,   76,   37,   76,   77,  211,
      210,   77,   76,   62,   77,   75,   78,   78,   78,   37,
       38,   38,   75,   78,   38,  209,  208,   83,   79,   80,
       38,  207,   38,   38,   83,   38,  206,   38,   40,   40,
       40,   40,   40,   40,   79,   80,   82,   84,   84,   82,
       89,   79,   80,  205,   85,   40,   85,   89,   86,   86,
       82,   85,   90,   91,   40,   86,   87,   82,   87,   88,
       91,   96,   88,   84,   93,   87,   90,   96,   96,   88,

       84,  115,   92,   90,   92,   94,   93,   94,   93,   98,
       93,   92,   94,   95,   97,   93,  109,  115,  109,   95,
       97,   97,   98,   95,  115,  109,  119,   99,   98,   98,
       95,   99,  100,  119,  101,  102,  100,  137,   99,  100,
      101,  102,  103,  104,  103,  106,  104,  101,  102,  103,
      104,  105,  108,  107,  136,  107,  105,  107,  134,  105,
      106,  111,  111,  110,  112,  108,  105,  106,  113,  111,
      107,  113,  108,  110,  110,  110,  112,  114,  113,  114,
      110,  116,  117,  112,  114,  120,  118,  122,  125,  133,
      117,  118,  120,  146,  123,  125,  116,  117,  118,  124,

      146,  122,  123,  116,  132,  147,   73,  124,  122,  123,
      138,  138,  138,  138,  124,  140,  140,  140,  140,  140,
      140,  147,  148,  149,  150,  151,   69,  155,  147,  152,
      152,   65,  151,  140,  148,  149,  152,  154,  150,   58,
       48,  148,  149,  155,  154,  150,  153,  153,  153,  156,
      155,  157,  158,  153,  159,  160,  156,  160,  157,  158,
      161,  162,  163,   45,  160,  165,  159,  164,  162,  163,
      164,  166,  165,  159,  166,  167,  161,  164,  166,  168,
      170,   24,  167,  161,   21,  169,  168,  169,  172,  172,
      170,  171,  171,  171,  169,  173,  174,  170,  175,  176,

      177,   16,  173,  174,  178,  175,  176,  177,  181,  180,
      178,  179,  181,  179,  172,  181,   13,  178,  171,  180,
      179,  172,  182,  184,  182,  171,  180,  183,  185,  182,
      189,  184,  187,  183,  186,  185,  188,  189,  184,  188,
      183,  190,  186,  188,  187,  191,  192,  194,  190,  186,
      195,  187,  191,  192,  193,  194,  193,  195,  196,   11,
      196,  193,  194,    9,  197,  196,  197,  198,  199,  200,
      198,  200,  201,  197,  201,  199,  200,  198,  202,  201,
      203,  204,  212,  212,  212,  212,  203,    3,  213,  214,
      215,  202,    0,  203,  204,  213,  214,  215,  202,  216,

      217,  204,  213,  218,  218,  220,    0,  217,  216,  219,
      218,  219,  222,  220,  221,  216,  219,  221,  223,  222,
      220,  221,  224,  225,  224,  223,  226,  227,  226,  224,
      225,  228,  229,  226,  227,  230,  231,  232,  228,  229,
      233,  237,  230,  231,  232,  234,  235,  233,  236,  235,
      238,  234,  239,  235,  240,    0,  236,  237,  234,    0,
      239,    0,  238,  236,  237,  241,  241,  239,  240,  238,
      242,  243,  241,    0,  244,  240,  244,  242,  243,  245,
      246,  244,  247,  248,  246,  251,    0,  245,  249,  250,
      248,  246,  250,  249,  245,  249,  247,  251,  252,  250,

      253,  254,  262,  247,  251,  252,  263,  264,  254,  262,
      265,  266,  253,  263,  264,  266,  268,  265,  267,  253,
        0,  270,  266,  268,  267,  269,  271,  269,  270,  275,
      277,  267,  269,  272,  271,  272,    0,  274,  273,  274,
      272,  271,  273,  275,  274,  276,  277,  280,  279,  273,
      275,  280,  279,  277,  278,  279,  278,  281,  280,  276,
      282,  278,  283,  285,  281,    0,  276,  284,  286,    0,
      285,  287,  283,  288,  282,  286,  284,  287,  287,  283,
      288,  282,  295,  284,  296,  295,  296,  297,  298,  295,
      298,  296,  299,  300,  297,  298,  301,  304,  303,  299,

      300,  305,  302,  304,  302,  303,  306,  307,  301,  302,
      304,    0,  308,  305,  307,  301,  309,  310,  306,  308,
      305,  311,  317,  309,  310,  306,  312,  312,  311,  318,
      319,  320,  321,  312,  317,    0,  318,    0,  320,  322,
      323,  317,  319,  324,  321,  325,  322,  323,  328,  319,
      324,  321,  329,  330,  325,  328,  331,  335,  332,  329,
      334,  325,  336,  331,  335,  337,  330,  338,    0,    0,
      339,  337,    0,  330,  332,  336,  334,  339,  337,  338,
      340,  332,  336,  334,  341,    0,  338,  340,    0,    0,
        0,  341,  343,    0,  343,  344,  344,    0,    0,  344,

      344,  345,  345,  345,  345,  345,  346,    0,  346,  346,
      346,  346,  346,  346,  346,  347,  347,    0,  347,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "script.l"
#define INITIAL 0
#line 2 "script.l"

//$XHEADER
static const char*   __XMEMORY_MODULE_NAME__ = __FILE__;
#include <globals/memory/xmemory.h>

#include "compiler.h"
#include "parser.h"

int      yycol=0;

static int SlideYYInput(char *buf,int max_size);

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) (result = SlideYYInput(buf,max_size))

void AckRead()
{
   yycol+=yyleng;
}

static const int LowerUpperConv   = 'a' - 'A';

static int stoi(char *n,int sys)
{
   int r=0;
   const char hex[]="0123456789ABCDEF";
   char *i;
   i=n;
   while(*i!=0)
   {
      char c[2];
	   c[0]=*i;
	   c[1]=0;
      //
      if( c[0] > 'Z' ) c[0]-=LowerUpperConv;
      //
      int v=(int)strstr( hex , c );
	   v-=(int)hex;
	   //
	   r=r*sys+v;
	   //
	   i++;
   }
   //
   return r;
}


#define MAX_INCLUDE_DEPTH        16

int               include_stack_idx = 0;
YY_BUFFER_STATE   include_stack[ MAX_INCLUDE_DEPTH ];
SDebugInfo        include_stack_debug[ MAX_INCLUDE_DEPTH ];
TStream           *include_stack_stream[ MAX_INCLUDE_DEPTH ];

TString           buffer;
TStream           *pStream=0;

/**/


#line 751 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 78 "script.l"


#line 901 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 343 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 920 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 80 "script.l"
{AckRead(); return PLUGIN           ;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "script.l"
{AckRead(); return BREAK            ;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 82 "script.l"
{AckRead(); return INPUT            ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 83 "script.l"
{AckRead(); return OUTPUT           ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 84 "script.l"
{AckRead(); return IVERTEX          ;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 85 "script.l"
{AckRead(); return OVERTEX          ;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 87 "script.l"
{AckRead(); return VERTEXSHADER     ;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "script.l"
{AckRead(); return RESERVE          ;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "script.l"
{AckRead(); return TEMP             ;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "script.l"
{AckRead(); return CASE             ;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "script.l"
{AckRead(); return CONST            ;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "script.l"
{AckRead(); return RADICAL          ;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "script.l"
{AckRead(); return STATIC           ;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "script.l"
{AckRead(); return REGISTER         ;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "script.l"
{AckRead(); return CATCH	         ;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "script.l"
{AckRead(); return CONTINUE	      ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "script.l"
{AckRead(); return DEFAULT	         ;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 99 "script.l"
{AckRead(); return DO	            ;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "script.l"
{AckRead(); return ELSE	            ;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "script.l"
{AckRead(); return FOR	            ;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 102 "script.l"
{AckRead(); return IF	            ;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "script.l"
{AckRead(); return IMPORT	         ;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 104 "script.l"
{AckRead(); return NULLLITERAL      ;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 105 "script.l"
{AckRead(); return RETURN	         ;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 106 "script.l"
{AckRead(); return THROW	         ;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 107 "script.l"
{AckRead(); return TRY	            ;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 108 "script.l"
{AckRead(); return SWITCH	         ;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 109 "script.l"
{AckRead(); return WHILE	         ;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 110 "script.l"
{AckRead(); return INC	            ;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 111 "script.l"
{AckRead(); return DEC	            ;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "script.l"
{AckRead(); return VOID             ;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 114 "script.l"
{AckRead(); return CHAR             ;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 115 "script.l"
{AckRead(); return BYTE             ;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 116 "script.l"
{AckRead(); return SHORT            ;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 117 "script.l"
{AckRead(); return WORD             ;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 118 "script.l"
{AckRead(); return INT              ;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 119 "script.l"
{AckRead(); return LONG             ;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 120 "script.l"
{AckRead(); return FLOAT            ;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 121 "script.l"
{AckRead(); return STRING           ;}  
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 122 "script.l"
{AckRead(); return VECTOR           ;}  
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "script.l"
{AckRead(); return CLASS            ;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "script.l"
{AckRead(); return PRIVATE          ;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "script.l"
{AckRead(); return PROTECTED        ;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 127 "script.l"
{AckRead(); return PUBLIC           ;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "script.l"
{AckRead(); return ADD              ;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "script.l"
{AckRead(); return DP3              ;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "script.l"
{AckRead(); return DP4              ;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "script.l"
{AckRead(); return DST              ;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "script.l"
{AckRead(); return EXPP             ;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "script.l"
{AckRead(); return LIT              ;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "script.l"
{AckRead(); return LOGP             ;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "script.l"
{AckRead(); return MAD              ;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "script.l"
{AckRead(); return MAX              ;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "script.l"
{AckRead(); return MIN              ;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "script.l"
{AckRead(); return MOV              ;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "script.l"
{AckRead(); return MUL              ;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "script.l"
{AckRead(); return RCP              ;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 142 "script.l"
{AckRead(); return RSQ              ;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 143 "script.l"
{AckRead(); return SGE              ;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 144 "script.l"
{AckRead(); return SLT              ;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "script.l"
{AckRead(); return SUB              ;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 147 "script.l"
{AckRead(); return EXP              ;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 148 "script.l"
{AckRead(); return FRC              ;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 149 "script.l"
{AckRead(); return LOG              ;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 150 "script.l"
{AckRead(); return M3X2             ;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 151 "script.l"
{AckRead(); return M3X3             ;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 152 "script.l"
{AckRead(); return M3X4             ;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 153 "script.l"
{AckRead(); return M4X3             ;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 154 "script.l"
{AckRead(); return M4X4             ;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 156 "script.l"
{AckRead(); return INCLUDE          ;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 157 "script.l"
{AckRead(); return DEFINE           ;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 158 "script.l"
{AckRead(); return DEFINE           ;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 159 "script.l"
{AckRead(); return UNDEFINE         ;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "script.l"
{AckRead(); return UNDEFINE         ;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "script.l"
{AckRead(); return IFDEF            ;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 162 "script.l"
{AckRead(); return IFNDEF           ;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "script.l"
{AckRead(); return ENDIF            ;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 164 "script.l"
{AckRead(); return DEFELSE          ;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 166 "script.l"
{AckRead(); return OPT0             ;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 167 "script.l"
{AckRead(); return OPT1             ;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 168 "script.l"
{AckRead(); return OPT2             ;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 169 "script.l"
{AckRead(); return OPT10            ;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 172 "script.l"
{AckRead(); return SET_ADD	         ;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 173 "script.l"
{AckRead(); return SET_SUB	         ;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 174 "script.l"
{AckRead(); return SET_DIV	         ;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "script.l"
{AckRead(); return SET_MOD	         ;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "script.l"
{AckRead(); return SET_MUL	         ;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "script.l"
{AckRead(); return SET_AND	         ;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "script.l"
{AckRead(); return SET_OR	         ;}  
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "script.l"
{AckRead(); return SET_XOR	         ;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "script.l"
{AckRead(); return SET_SHL	         ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "script.l"
{AckRead(); return SET_SHR	         ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "script.l"
{AckRead(); return LAND	            ;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "script.l"
{AckRead(); return EQ	            ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "script.l"
{AckRead(); return NE	            ;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "script.l"
{AckRead(); return LE	            ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "script.l"
{AckRead(); return GE	            ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "script.l"
{AckRead(); return SHL              ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "script.l"
{AckRead(); return SHR              ;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "script.l"
{AckRead(); return LOR	            ;}  
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "script.l"
{AckRead(); return INC	            ;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "script.l"
{AckRead(); return DEC              ;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "script.l"
{AckRead(); return ELLIPSIS         ;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "script.l"
{AckRead(); return yytext[0]        ;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 196 "script.l"
{
                                 yylval.par=pParameterMng->CreateParameter( &yytext[1] );
                                 //
                                 AckRead();
                                 //
						            	return MODIFIER;
                              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "script.l"
{
						            	//int a=atoi( &yytext[1] );
                                 //yylval.par=pParameterMng->CreateParameter( a );
                                 yylval.par=pParameterMng->CreateParameter( yytext );
                                 //
                                 AckRead();
                                 //
						            	return AREGISTER;
                              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 214 "script.l"
{
						            	//int a=atoi( &yytext[1] );
                                 //yylval.par=pParameterMng->CreateParameter( a );
                                 yylval.par=pParameterMng->CreateParameter( yytext );
                                 //
                                 AckRead();
                                 //
						            	return TREGISTER;
                              }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 224 "script.l"
{
						            	//int a=atoi( &yytext[1] );
                                 //yylval.par=pParameterMng->CreateParameter( a );
                                 yylval.par=pParameterMng->CreateParameter( yytext );
                                 //
                                 AckRead();
                                 //
						            	return CREGISTER;
                              }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 234 "script.l"
{
						            	//int a=atoi( &yytext[1] );
                                 //yylval.par=pParameterMng->CreateParameter( a );
                                 yylval.par=pParameterMng->CreateParameter( yytext );
                                 //
                                 AckRead();
                                 //
						            	return IREGISTER;
                              }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 244 "script.l"
{
						            	double a=atof( yytext );
                                 yylval.par=pParameterMng->CreateParameter( (float)a );
                                 //
                                 AckRead();
                                 //
						            	return FLITERAL;
						            };
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 252 "script.l"
{
                                 char  text[64];
                                 strcpy( text , yytext );
                                 text[ strlen( text )-1 ]=0;
						            	double a=atof( text );
                                 yylval.par=pParameterMng->CreateParameter( (float)a );
                                 //
                                 AckRead();
                                 //
						            	return FLITERAL;
						            };
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 263 "script.l"
{
						            	int a=atoi( yytext );
                                 yylval.par=pParameterMng->CreateParameter( (float)a );
						            	//
                                 AckRead();
                                 //
						            	return FLITERAL;
						            };
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 272 "script.l"
{
						               int a=stoi( &yytext[2] , 2 );
                                 yylval.par=pParameterMng->CreateParameter( (float)a );
                                 //
                                 AckRead();
                                 //
						            	return FLITERAL;
						            }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 280 "script.l"
{
						            	int a=stoi( &yytext[2] , 16 );
                                 yylval.par=pParameterMng->CreateParameter( (float)a );
                                 //
                                 AckRead();
                                 //
						            	return FLITERAL;
						            }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 289 "script.l"
{
                                 yylval.par=pParameterMng->CreateParameter( yytext );
                                 AckRead();
                                 //
                                 if( SCIsPlugin( yytext ) ) return CLASS_IDENT;
                                 //
                                 //printf("[%s]\n" , yytext );
                                 //
								         return IDENT;
						            };
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 301 "script.l"
{  AckRead(); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 303 "script.l"
{ 
                                 AckRead();
                                 yycol=1;
                                 //
                                 pScriptDebug->Debug.line++;
                              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 310 "script.l"
{  AckRead(); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 313 "script.l"
{
                                 AckRead();
                                 //
                                 int c=0,lc=0;
                                 while(1)
                                 {
                                    lc=c;
                                    c=yyinput();
                                    // end of line 
                                    if( c=='\n' ) 
                                    {
                                       pScriptDebug->Debug.line++;
                                       yycol=0;
                                    }
                                    yycol++;
                                    //
                                    // end of file
                                    if( c==EOF ) break;
                                    // end of comment
                                    if( lc=='*' && c=='/' ) break;
                                 }
                                 //
                                 yycol++;
                              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "script.l"
{ 
                                 AckRead(); 
                              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 343 "script.l"
{
                                 AckRead();
                                 //
                                 return yytext[0];
                              };
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 350 "script.l"
{
                                 if( --include_stack_idx < 0 )
                                 {
                                    yyterminate();
                                 }
                                 else
                                 {
                                    xdelete( pStream ); 
                                    pScriptDebug->Debug=include_stack_debug[ include_stack_idx ];
                                    pStream=include_stack_stream[ include_stack_idx ];
                                    yy_delete_buffer( YY_CURRENT_BUFFER );
                                    yy_switch_to_buffer( include_stack[include_stack_idx] );
                                 }                              
                              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 365 "script.l"
ECHO;
	YY_BREAK
#line 1730 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 343 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 343 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 342);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 365 "script.l"

                              
#define min(x,y) (x<y?x:y)
#define max(x,y) (x>y?x:y)

int            yyparse();
//
int            parseerror=0;
//
EScriptError   LastError=PEInvalidToken;


void yyerror(char *err)
{
   SError Error;
   //
   pScriptDebug->Debug.col=yycol;
   Error.SetError( LastError , pScriptDebug->Debug , yytext );
   //
   parseerror=1;
}

int yywrap()
{
	return 1;
}

int SlideYYInput(char *buf,int max_size)
{
   if( !YY_CURRENT_BUFFER->yy_input_file ) 
   {
      if( pStream )
      {
         return pStream->Read( buf , max_size );
      }
      else if( buffer )
      {
         int n=min( max_size , buffer );
         //
         memcpy( buf , tochar( buffer ) , n );
         //
         buffer.Delete( 0 , n );
         //
         return n;
      }
      return 0;
   }
   //
   return fread( buf , 1 , max_size ,  YY_CURRENT_BUFFER->yy_input_file );
}

int isatty(int a)
{
   return 0;
}

int ParseInclude(const char *fname)
{
   if( !fname || fname[0]==0 ) return 1;
   //
   if ( include_stack_idx >= MAX_INCLUDE_DEPTH )
   {
      fprintf( stderr, "Includes nested too deeply" );
      return 1;
   }
   include_stack_debug  [ include_stack_idx   ]=pScriptDebug->Debug;
   include_stack        [ include_stack_idx   ]=YY_CURRENT_BUFFER;
   include_stack_stream [ include_stack_idx++ ]=pStream;
   //
   pScriptDebug->AddSource( fname );
   //
   yycol=0;
   //
   TFileStream *f=xnewp( TFileStream , ( fname ) );
   //
   if( !f->Opened() )
   {
      xdelete( f );
      return 2;
   }
   //
   pStream=f;
   //
   yy_switch_to_buffer( yy_create_buffer( 0 , YY_BUF_SIZE ) );
   //
   return 0;
}

int ParseCompileFile(const char *fname)
{
   include_stack_idx = 0;
   //
   pCompilerTreeMng->pRoot=0;
   yyrestart(0);
   //
   yyin=fopen( fname , "r" );
   if( !yyin ) return 1;
	//
   pScriptDebug->AddSource( fname );
   //
   yy_switch_to_buffer( yy_create_buffer( yyin , YY_BUF_SIZE ) );
   //
	yyparse();
   //
   if( yyin ) fclose( yyin );
   //
   return parseerror;
}

int ParseCompileBuffer(const char *buf,int size)
{
   include_stack_idx = 0;
   //
   pCompilerTreeMng->pRoot=0;
   yyrestart(0);
   //
   pScriptDebug->AddSource( "buffer input" );
   //
   yy_switch_to_buffer( yy_create_buffer( 0 , size+2 ) );
   //
   buffer=buf;
   //
	yyparse();
   //
   return parseerror;
}

void ParseRestart()
{
	yyrestart(0);
}


/**/

