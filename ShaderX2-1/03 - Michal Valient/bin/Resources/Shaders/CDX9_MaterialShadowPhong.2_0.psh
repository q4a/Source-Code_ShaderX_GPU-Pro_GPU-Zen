//*****************************************************************************
//* This file is part of the Dimension3 renderer library                      *
//* Copyright (C) 2003  Michal Valient (valient@host.sk)                      *
//*                                                                           *
//* Dimension3 renderer can be found at http://www.dimension3.host.sk         *
//*                                                                           *
//* This program is free software; you can redistribute it and/or modify      *
//* it under the terms of the GNU General Public License as published by      *
//* the Free Software Foundation; either version 2 of the License, or         *
//* (at your option) any later version.                                       *
//*                                                                           *
//* This program is distributed in the hope that it will be useful,           *
//* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
//* GNU General Public License for more details.                              *
//*                                                                           *
//* You should have received a copy of the GNU General Public License         *
//* along with this program; if not, write to the Free Software               *
//* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * 
//*****************************************************************************
//hdr_utility_remove_tag


//*
//------------------------------
// Per pixel Phong with shadow
//
// Part of Dimension3 Renderer
// (c)2003 Michal Valient
// akka em / STV3 akka  R.A.Y / EastW00D
//------------------------------

ps_2_0

//------------------------------
// Constant registers 
//------------------------------
//
// c0 - diffuse texture multiplier (premultiplied with light color)
// c1 - specular texture multiplier (premultiplied with light const)
// c2 - specular shininess (shi, shi, shi, 1.0f)
// c3 - shadow texel adjust (x,y) and texture width/height (z,w)
// c4 - c11 - 3x3 filtering kernel
// c29 - texture width/height (x,y)
// c30 - texel divider - 1 / texels_in_kernel
def c31, 2.0f, 1.0f, 0.0f, 4.0f     //helper constant

//------------------------------
// Used input registers
//------------------------------
//
dcl         t0.xy                   //texture coordinates
dcl         t1.xyz                  //light vector
dcl         t2.xyz                  //eye vector
dcl         t3.xyzw                 //projector texture coordinates
dcl         t4.xyzw                 //normalized distance from light

//------------------------------
// Used input texture samplers
//------------------------------
//
dcl_2d      s0                      //diffuse texture (gloss in alpha)
dcl_2d      s1                      //normal texture
dcl_2d      s2                      //shadow buffer
dcl_2d      s3                      //spotlight texture

//------------------------------
// Output
//------------------------------
// oC0 - output color
//

//#########################################################################
//##   CODE    ############################################################
//#########################################################################
//
rcp         r11, t3.w               //going to do projection divide
mad         r0, t3, r11, c3         //get texture coordinates (with adjusted center)
texld       r11, r0, s2             //sample shadow

//Left collumn
add         r10, c4, r0
add         r9, c5, r0
add         r8, c6, r0
//center collumn (+with given texel)
add         r7, c7, r0
add         r6, c8, r0
//Right collumn
add         r5, c9, r0
add         r4, c10, r0
add         r3, c11, r0

//Left collumn
texld       r10, r10, s2
texld       r9, r9, s2
texld       r8, r8, s2
//center collumn
texld       r7, r7, s2
texld       r6, r6, s2
//Right collumn
texld       r5, r5, s2
texld       r4, r4, s2
texld       r3, r3, s2

//Left collumn
sub         r10.x, r10.x, t4.x
sub         r10.y, r9.x, t4.x
sub         r10.z, r8.x, t4.x
cmp         r1.xyz, r10, c30.r, c30.g      //is it nearer?
//Center collumn
sub         r9.x, r7.x, t4.x
sub         r9.y, r11.x, t4.x
sub         r9.z, r6.x, t4.x
cmp         r2.xyz, r9, c30.r, c30.g        //is it nearer?
//Right collumn
sub         r8.x, r5.x, t4.x
sub         r8.y, r4.x, t4.x
sub         r8.z, r3.x, t4.x
cmp         r3.xyz, r8, c30.r, c30.g        //is it nearer?

mul         r0, r0, c29                 //get coordinate in texture
frc         r0, r0                      //get fractional part only

lrp         r10.xyz, r0.x, r2, r1       //interpolate X values of shadow (col1 + col2)
lrp         r11.xyz, r0.x, r3, r2       //interpolate X values of shadow (col2 + col3)

lrp         r3.x, r0.y, r10.y, r10.x    //interpolate Y - column1 - row1+row2
lrp         r3.y, r0.y, r10.z, r10.y    //interpolate Y - column1 - row2+row3
lrp         r3.z, r0.y, r11.y, r11.x    //interpolate Y - column2 - row1+row2
lrp         r3.w, r0.y, r11.z, r11.y    //interpolate Y - column2 - row2+row3

dp4         r8.x, r3, c31.g               //accumulate

//------------------------------
// Setup needed vectors - load and normalize
//------------------------------
//
texld       r0, t0, s1              //load normal
mad         r0, r0, c31.r, -c31.g   //bias normal to range -1,1

//All NRM instructions had to be replaced with standard dp3-rsq-mul code
//due to nrm bug on ATI 9700. (DX9 or ATI error?)
//this bug caused r8 register (shadow) to be altered weird way after nrm.
//if this is repaired somewhere, dp3-rsq-mul can be replaced with commented out code
//nrm         r11, r0                //r11 = normalized normal
dp3         r11.x, r0, r0
rsq         r11.x, r11.x
mul         r11.xyz, r0, r11.x
//mov         r0.xyz, t1
//nrm         r10, r0                 //r10 = normalized light vector
dp3         r10.x, t1, t1
rsq         r10.x, r10.x
mul         r10.xyz, t1, r10.x
//mov         r0.xyz, t2
//nrm         r9, r0                  //r9 = normalized eye vector
dp3         r9.x, t2, t2
rsq         r9.x, r9.x
mul         r9.xyz, t2, r9.x

//------------------------------
// Compute diffuse and specular intensities
//------------------------------
//
dp3         r0, r11, r10            //r0 = (n.l)
mul         r1, r0, c31.r           //r1.g = 2*(n.l)
mad         r1, r1, r11, -r10       //compute reflectance vector - r1 = 2(n.l)n - l
dp3_sat     r1, r1, r9              //r1 = (r.v)
pow         r0.g, r1.r, c2.r        //r1 = (r.v)^shi

cmp         r0, r0.r, r0, c31.b     //if (n.l)<0 do not lit anything - zero intensities

//------------------------------
// Modulate texture with computed intensities
//------------------------------
//
texld       r6, t0, s0              //load diffuse texture (gloss map is in alpha)
texldp      r4, t3, s3              //load projector texture (perspective correct)

mul         r2, r6.a, r0.g          //modulate specular intensity with gloss map
mul         r2, r2, c1              //multiply with material's specular color and light color
mul         r3, r6, r0.r            //modulate diffuse intensity with texture
mad         r0, r3, c0, r2          //multiply with material's diffuse color and light color add specular
mul         r0, r0, r4              //modulate it with spotlight texture
mul         r0, r0, r8.x            //shadow

mov         oC0, r0                 //color output
//*/



//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////



/*
//------------------------------
// Per pixel Phong with shadow - classis PCF
//
// Part of Dimension3 Renderer
// (c)2003 Michal Valient
// akka em / STV3 akka  R.A.Y / EastW00D
//------------------------------

ps_2_0

//------------------------------
// Constant registers 
//------------------------------
//
// c0 - diffuse texture multiplier (premultiplied with light color)
// c1 - specular texture multiplier (premultiplied with light const)
// c2 - specular shininess (shi, shi, shi, 1.0f)
// c3 - shadow texel adjust (x,y) and texture width/height (z,w)
// c4 - c11 - 3x3 filtering kernel
// c29 - texture width/height (x,y)
def c31, 2.0f, 1.0f, 0.0f, 4.0f     //helper constant
def c28, 0.11111111111111111111111111111111f, 0.0f, 0.0f, 0.0f  //1/9

//------------------------------
// Used input registers
//------------------------------
//
dcl         t0.xy                   //texture coordinates
dcl         t1.xyz                  //light vector
dcl         t2.xyz                  //eye vector
dcl         t3.xyzw                 //projector texture coordinates
dcl         t4.xyzw                 //normalized distance from light

//------------------------------
// Used input texture samplers
//------------------------------
//
dcl_2d      s0                      //diffuse texture (gloss in alpha)
dcl_2d      s1                      //normal texture
dcl_2d      s2                      //shadow buffer
dcl_2d      s3                      //spotlight texture

//------------------------------
// Output
//------------------------------
// oC0 - output color
//

//#########################################################################
//##   CODE    ############################################################
//#########################################################################
//
rcp         r11, t3.w               //going to do projection divide
mad         r0, t3, r11, c3         //get texture coordinates (with adjusted center)
texld       r11, r0, s2             //sample shadow

//Left collumn
add         r10, c4, r0
add         r9, c5, r0
add         r8, c6, r0
//center collumn (+with given texel)
add         r7, c7, r0
add         r6, c8, r0
//Right collumn
add         r5, c9, r0
add         r4, c10, r0
add         r3, c11, r0

//Left collumn
texld       r10, r10, s2
texld       r9, r9, s2
texld       r8, r8, s2
//center collumn
texld       r7, r7, s2
texld       r6, r6, s2
//Right collumn
texld       r5, r5, s2
texld       r4, r4, s2
texld       r3, r3, s2

//Left collumn
sub         r10.x, t4.x, r10.x
sub         r10.y, t4.x, r9.x
sub         r10.z, t4.x, r8.x
cmp         r1.xyz, r10, c28.g, c28.r      //is it nearer?
//Center collumn
sub         r9.x, t4.x, r7.x
sub         r9.y, t4.x, r11.x
sub         r9.z, t4.x, r6.x
cmp         r2.xyz, r9, c28.g, c28.r        //is it nearer?
//Right collumn
sub         r8.x, t4.x, r5.x
sub         r8.y, t4.x, r4.x
sub         r8.z, t4.x, r3.x
cmp         r3.xyz, r8, c28.g, c28.r        //is it nearer?

dp3         r10.x, r1, c31.g
dp3         r10.y, r2, c31.g
dp3         r10.z, r3, c31.g
dp3         r8.x, r10, c31.g             //accumulate

//------------------------------
// Setup needed vectors - load and normalize
//------------------------------
//
texld       r0, t0, s1              //load normal
mad         r1, r0, c31.r, -c31.g   //bias normal to range -1,1
nrm         r11, r1                 //r11 = normalized normal
mov         r1.xyz, t1
nrm         r10, r1                 //r10 = normalized light vector
mov         r1.xyz, t2
nrm         r9, r1                  //r9 = normalized eye vector

//------------------------------
// Compute diffuse and specular intensities
//------------------------------
//
dp3         r0, r11, r10            //r0 = (n.l)
mul         r1, r0, c31.r           //r1.g = 2*(n.l)
mad         r1, r1, r11, -r10       //compute reflectance vector - r1 = 2(n.l)n - l
dp3_sat     r1, r1, r9              //r1 = (r.v)
pow         r0.g, r1.r, c2.r        //r1 = (r.v)^shi

cmp         r0, r0.r, r0, c31.b     //if (n.l)<0 do not lit anything - zero intensities

//------------------------------
// Modulate texture with computet intensities
//------------------------------
//
texld       r6, t0, s0              //load diffuse texture (gloss map is in alpha)
texldp      r4, t3, s3              //load projector texture (perspective correct)

mul         r2, r6.a, r0.g          //modulate specular intensity with gloss map
mul         r2, r2, c1              //multiply with material's specular color and light color
mul         r3, r6, r0.r            //modulate diffuse intensity with texture
mad         r0, r3, c0, r2          //multiply with material's diffuse color and light color add specular
mul         r0, r0, r4              //modulate it with spotlight texture
mul         r0, r0, r8.x            //shadow

mov         oC0, r0                 //color output
//*/



//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////



/*
//-------------------------------------
//- Shader to show shadow mapping algorithm 
//-------------------------------------
ps_2_0

def c31, 2.0f, 1.0f, 0.0f, 4.0f     //helper constant
def c29, 0.5f, 0.5f, 0.5f, 0.5f     //helper constant

dcl         t0.xy                   //texture coordinates
dcl         t1.xyz                  //light vector
dcl         t2.xyz                  //eye vector
dcl         t3.xyzw                 //projector texture coordinates
dcl         t4.xyzw                 //normalized distance from light

dcl_2d      s0                      //diffuse texture (gloss in alpha)
dcl_2d      s1                      //normal texture
dcl_2d      s2                      //shadow buffer
dcl_2d      s3                      //spotlight texture

rcp         r11, t3.w               //going to do projection divide
mad         r0, t3, r11, c3         //get texture coordinates (with adjusted center)
texld       r11, r0, s2             //sample shadow

mov         r8, c31.b
mov         r8.x, r11.x
mov         r8.y, t4.x
sub         r0.z, r11.x, t4.x
cmp         r8.z, r0.z, c31.y, c31.z


//------------------------------
// Setup needed vectors - load and normalize
//------------------------------
//
texld       r0, t0, s1              //load normal
mad         r1, r0, c31.r, -c31.g   //bias normal to range -1,1
nrm         r11, r1                 //r11 = normalized normal
mov         r1.xyz, t1
nrm         r10, r1                 //r10 = normalized light vector
mov         r1.xyz, t2
nrm         r9, r1                  //r9 = normalized eye vector


dp3_sat     r7, r11, r10            //diffuse
dp3_sat     r6, r11, r9             //diffuse2
mul         r7, r7, c29
mul         r6, r6, c29
mad         r8.z, r7, r8.z, r6

//mov         r0, r8.x                //show shadow map
//mov         r0, r8.y                //show distance
mov         r0, r8.z                //show mapped
//mov         r0, r8                  //show combined
mov         oC0, r0
//*/
