//*****************************************************************************
//* This file is part of the Dimension3 renderer library                      *
//* Copyright (C) 2003  Michal Valient (valient@host.sk)                      *
//*                                                                           *
//* Dimension3 renderer can be found at http://www.dimension3.host.sk         *
//*                                                                           *
//* This program is free software; you can redistribute it and/or modify      *
//* it under the terms of the GNU General Public License as published by      *
//* the Free Software Foundation; either version 2 of the License, or         *
//* (at your option) any later version.                                       *
//*                                                                           *
//* This program is distributed in the hope that it will be useful,           *
//* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
//* GNU General Public License for more details.                              *
//*                                                                           *
//* You should have received a copy of the GNU General Public License         *
//* along with this program; if not, write to the Free Software               *
//* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * 
//*****************************************************************************
//hdr_utility_remove_tag


//------------------------------
// Cook-Torrance lighting and shading - Pixel Shader
//
// Desc :
//   Cook-Torrance lighting and shading
//
// Part of Dimension3 Renderer
// (c)2003 Michal Valient
// akka em / STV3 akka  R.A.Y / EastW00D
//------------------------------

ps_1_4

//------------------------------
// Constant registers 
//------------------------------
//
//  c2 - vector in form (roughness, 1.0, 1.0, 1.0)
//  c3 - vector in form (refraction_index, 1.0, 1.0, 1.0)
def c4, 1,1,1,1

//------------------------------
// Used input registers
//------------------------------
//
// t0 - texture and normal coordinates
// t1 - light vector
// t2 - eye vector
// t3 - half vector
// t4 - projector coordinates

//------------------------------
// Used input texture stages
//------------------------------
//
// stage0 - diffuse texture
// stage1 - normal texture
// stage2 - f(n_dot_h,roughness) = Beckman_distribution_function(n_dot_h,roughness)
// stage3 - f(n_dot_l,n_dot_v) = Fresnel_term(n_dot_l) / Pi * n_dot_v
// stage4 - f(n_dot_l,n_dot_v) = Fresnel_term(x)
// stage5 - projector texture

//------------------------------
// Output
//------------------------------
//
// r0 - output color

//#########################################################################
//##   CODE    ############################################################
//#########################################################################
//

//------------------------------
// Sample normal texture and load vectors from input
//------------------------------
//
texld r0, t0                    //load texture (gloss map is in alpha channel)
texld r1, t0                    //normal vector (n)
texcrd r2.rgb, t1.xyz           //Light vector (l)
texcrd r3.rgb, t2.xyz           //eye vector (v)
texcrd r4.rgb, t3.xyz           //half vector (h)
texld r5, t4_dw.xyw             //projector texture

//------------------------------
// Compute look-up texture coordinates
//------------------------------
//
mul r0.rgb, r0, r5              //texture * spotlight
dp3 r5.rgb, r1_bx2, r2          //n.l - for diffuse part

dp3_sat r2.rgb, r1_bx2, r4      //n.h - first parameter of Beckman lookup
mov r2.g, c2.r                  //roughness (M) - 2nd parameter of lookup

dp3_sat r3.rgb, r1_bx2, r3      //n.v - for Fresnel equation
mov r3.g, c3.r                  //index of refraction (RI) - 2nd parameter of lookup

mul r1.rgb, r0, r5              //diffuse lighting
mul r4.rgb, r0, r0.a            //modulate texture with gloss

//------------------------------
// 2nd phase - Sample diffuse texture and look-up in texture functions
//------------------------------
//
phase
texld r2, r2                    //Beckman distribution (B)
texld r3, r3                    //Fresnel lookup (F)

//------------------------------
// Expand Beckman and Fresnel to range 0..4 from RGB channels
//------------------------------
//
add r2.r, r2.r, r2.g            //unpack - R+G
add r2.g, r2.r, r2.b            //R+G+B
add r2.r, r2.r, r2.g            //R+G+B+A

add r3.r, r3.r, r3.g            //unpack - R+G
add r3.r, r3.r, r3.b            //R+G+B
add r3.r, r3.r, r3.a            //R+G+B+A

mul r2.r, r2.r, r3.r            //I<spec> = B * F
mad r0.rgb, r4, r2.r, r1        //specular + diffuse
+ mov r0.a, c4.a

/*
//------------------------------
// Cook-Torrance lighting and shading - Pixel Shader
//
// Desc :
//   Cook-Torrance lighting and shading with 1/3 of diffuse
//
// Part of Dimension3 Renderer
// (c)2003 Michal Valient
// akka em / STV3 akka  R.A.Y / EastW00D
//------------------------------

ps_1_4

//------------------------------
// Constant registers 
//------------------------------
//
//  c2 - vector in form (roughness, 1.0, 1.0, 1.0)
//  c3 - vector in form (refraction_index, 1.0, 1.0, 1.0)
def c6, 0.33, 0.33, 0.33, 0.33

//------------------------------
// Used input registers
//------------------------------
//
// t0 - texture and normal coordinates
// t1 - light vector
// t2 - eye vector
// t3 - half vector

//------------------------------
// Used input texture stages
//------------------------------
//
// stage0 - diffuse texture
// stage1 - normal texture
// stage2 - f(n_dot_h,roughness) = Beckman_distribution_function(n_dot_h,roughness)
// stage3 - f(n_dot_l,n_dot_v) = Fresnel_term(n_dot_l) / Pi * n_dot_v
// stage4 - f(n_dot_l,n_dot_v) = Fresnel_term(x)

//------------------------------
// Output
//------------------------------
//
// r0 - output color

//#########################################################################
//##   CODE    ############################################################
//#########################################################################
//

//------------------------------
// Sample normal texture and load vectors from input
//------------------------------
//
texld r0, t0                    //load texture (gloss map is in alpha channel)
texld r1, t0                    //normal vector (n)
texcrd r2.rgb, t1.xyz           //Light vector (l)
texcrd r3.rgb, t2.xyz           //eye vector (v)
texcrd r4.rgb, t3.xyz           //half vector (h)

//------------------------------
// Compute look-up texture coordinates
//------------------------------
//
dp3 r5.rgb, r1_bx2, r2          //n.l - for diffuse part

dp3_sat r2.rgb, r1_bx2, r4      //n.h - first parameter of Beckman lookup
mov r2.g, c2.r                  //roughness (M) - 2nd parameter of lookup

dp3_sat r3.rgb, r1_bx2, r3      //n.v - for Fresnel equation
mov r3.g, c3.r                  //index of refraction (RI) - 2nd parameter of lookup

mul r1.rgb, r0, r5              //diffuse lighting
mul r1.rgb, r1, c6              //attenuate diffuse
mul r4.rgb, r0, r0.a            //modulate texture with gloss

//------------------------------
// 2nd phase - Sample diffuse texture and look-up in texture functions
//------------------------------
//
phase
texld r0, t0                    //load texture (gloss map is in alpha channel)
texld r2, r2                    //Beckman distribution (B)
texld r3, r3                    //Fresnel lookup (F)

//------------------------------
// Expand Beckman and Fresnel to range 0..4 from RGB channels
//------------------------------
//
add r2.r, r2.r, r2.g            //unpack - R+G
add r2.g, r2.r, r2.b            //R+G+B
add r2.r, r2.r, r2.g            //R+G+B+A

add r3.r, r3.r, r3.g            //unpack - R+G
add r3.r, r3.r, r3.b            //R+G+B
add r3.r, r3.r, r3.a            //R+G+B+A

mul r2.r, r2.r, r3.r            //I<spec> = B * F
mad r0.rgb, r4, r2.r, r1        //specular + diffuse
//*/
